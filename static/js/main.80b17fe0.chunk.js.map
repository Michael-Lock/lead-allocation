{"version":3,"sources":["LocalFileReader.js","AllocationUtils.js","ConfigPanel.js","Table.js","ResultsPanel.js","LeadAllocationHome.js","reportWebVitals.js","index.js"],"names":["LocalFileReader","props","handleOpenDialog","e","state","buttonRef","current","open","handleOnFileLoad","data","onFileLoad","handleOnError","err","file","inputElem","reason","console","log","handleOnRemoveFile","onFileRemove","handleRemoveFile","removeFile","React","createRef","ref","this","onError","noClick","noDrag","config","header","dynamicTyping","skipEmptyLines","onRemoveFile","style","display","flexDirection","marginBottom","type","onClick","disabled","borderRadius","marginLeft","marginRight","width","paddingLeft","paddingRight","borderWidth","borderStyle","borderColor","height","lineHeight","marginTop","paddingTop","name","Component","ALLOCATION_MODES","RoundRobin","id","description","allocationFunction","leads","courseAdvisors","updatedLeads","slice","updatedCourseAdvisors","map","advisor","newAdvisor","lastAllocatedId","domesticAdvisors","filter","portfolio","PORTFOLIOS","canadaAdvisors","leadIndex","lead","sortedAdvisors","sort","a","b","filteredAdvisors","isInWorkingHours","created","location","selectedAdvisor","length","leadId","allocatedCa","allotmentAtAllocation","currentAllotment","totalAllotment","RoundRobinUnconstrained","MostSuitableUnconstrained","i","validAdvisors","caNum","propensity","mostSuitableCa","MostSuitableAggressive","isMatchingPortfolio","caIsInWorkingHours","MostSuitableFixedAllotmentTolerance","parameters","allotmentTolerance","order","label","decayPerDay","cycleDecayDurationDays","decayPerCycle","allocateMostSuitableWithAllotmentLimit","MostSuitableProportionalAllotmentTolerance","SuitabilityAllotmentBalancedLinear","suitabilityWeighting","allotmentWeighting","Number","simulationStartDate","clone","startOf","lastDailyDecayDate","lastCycleDecayDate","availableAdvisors","currentDate","cycleDelayDays","diff","decayCyclesPassed","Math","floor","totalDecayPercentage","add","dailyDecayDays","decayAmount","decayModifier","max","suitabilityScore","averageAllotment","overallScoreA","overallScoreB","SuitabilityAllotmentBalancedProportional","cumulativePropensity","averagePropensity","calculateOverallScore","TIMEZONES","Adelaide","startHour","endHour","timezoneOffsetFromAdelaide","Canada","isPercentage","tolerance","lowestAllotment","MAX_SAFE_INTEGER","min","allotmentCap","datetime","timezone","hourOfDay","hour","minute","dayOfWeek","subtract","day","effectiveEndHour","effectiveHourOfDay","ConfigPanel","allocationModeOptionElements","value","hidden","concat","Object","keys","mode","inputParameters","selectedMode","currentParameter","htmlFor","step","onChange","onParameterChange","onModeChange","target","Table","columns","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","ResultsPanel","CA_RESULTS_TABLE_COLUMNS","useMemo","Header","accessor","toFixed","varianceToInherent","predictedConversions","OVERALL_RESULTS_TABLE_COLUMNS","averageVarianceToInherent","aggregatedResults","LeadAllocationHome","useState","leadData","setLeadData","setCourseAdvisors","setSelectedMode","setAggregatedResults","setInputParameters","exportData","setExportData","DATE_FORMAT","handleFileRemove","generateResults","result","leadNum","selectedPropensity","cumulativeInherent","inherent","totalLeads","updatedResult","generateExportData","adjustedLeads","newLead","format","caName","className","newCourseAdvisors","rowNum","newCa","handleCaDataLoad","salesforceId","Id","moment","cluster","caNames","fieldNum","some","v","meta","fields","push","handleLeadDataLoad","handleModeChange","parameter","parameterOrder","updatedInputParameters","splice","handleParameterChange","runSimulation","filename","getExportFilename","bom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.80b17fe0.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport { CSVReader } from 'react-papaparse'\r\n\r\n\r\n\r\nexport default class LocalFileReader extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            buttonRef: React.createRef()\r\n        }\r\n    }    \r\n    \r\n  handleOpenDialog = (e) => {\r\n    // Note that the ref is set async, so it might be null at some point\r\n    if (this.state.buttonRef.current) {\r\n      this.state.buttonRef.current.open(e)\r\n    }\r\n  }\r\n\r\n  handleOnFileLoad = (data) => {\r\n    return this.props.onFileLoad(data);\r\n  }\r\n\r\n  handleOnError = (err, file, inputElem, reason) => {\r\n    console.log(err)\r\n  }\r\n\r\n  handleOnRemoveFile = (data) => {\r\n    return this.props.onFileRemove();\r\n  }\r\n\r\n  handleRemoveFile = (e) => {\r\n    // Note that the ref is set async, so it might be null at some point\r\n    if (this.state.buttonRef.current) {\r\n        this.state.buttonRef.current.removeFile(e)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <CSVReader\r\n        ref={this.state.buttonRef ? this.state.buttonRef : null}\r\n        onFileLoad={this.handleOnFileLoad}\r\n        onError={this.handleOnError}\r\n        noClick\r\n        noDrag\r\n        config={\r\n            {\r\n                header: true,\r\n                dynamicTyping: true,\r\n                skipEmptyLines: true,\r\n            }\r\n        }\r\n        onRemoveFile={this.handleOnRemoveFile}\r\n      >\r\n        {({ file }) => (\r\n          <aside\r\n            style={{\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n              marginBottom: 10\r\n            }}\r\n          >\r\n            <button\r\n              type='button'\r\n              onClick={this.handleOpenDialog}\r\n              disabled={this.props.disabled}\r\n              style={{\r\n                borderRadius: 0,\r\n                marginLeft: 0,\r\n                marginRight: 0,\r\n                width: '40%',\r\n                paddingLeft: 0,\r\n                paddingRight: 0\r\n              }}\r\n            >\r\n              Browse file\r\n            </button>\r\n            <div\r\n              style={{\r\n                borderWidth: 1,\r\n                borderStyle: 'solid',\r\n                borderColor: '#ccc',\r\n                height: 45,\r\n                lineHeight: 2.5,\r\n                marginTop: 5,\r\n                marginBottom: 5,\r\n                paddingLeft: 13,\r\n                paddingTop: 3,\r\n                width: '60%'\r\n              }}\r\n            >\r\n              {file && file.name}\r\n            </div>\r\n            <button\r\n              style={{\r\n                borderRadius: 0,\r\n                marginLeft: 0,\r\n                marginRight: 0,\r\n                paddingLeft: 20,\r\n                paddingRight: 20\r\n              }}\r\n              onClick={this.handleRemoveFile}\r\n            >\r\n              Remove\r\n            </button>\r\n          </aside>\r\n        )}\r\n      </CSVReader>\r\n    )\r\n  }\r\n}","\r\n\r\nexport const ALLOCATION_MODES = {\r\n    RoundRobin: {\r\n        id: 0,\r\n        name: \"Round Robin\",\r\n        description: \"Allocates leads one by one to each available CA\",\r\n        allocationFunction: allocateRoundRobin,\r\n    },\r\n    RoundRobinUnconstrained: {\r\n        id: 1,\r\n        name: \"Round Robin (Unconstrained)\",\r\n        description: \"Allocates leads one by one to each CA, irrespective of portfolio or working hours\",\r\n        allocationFunction: allocateRoundRobinUnconstrained,\r\n    },\r\n    MostSuitableUnconstrained: {\r\n        id: 2,\r\n        name: \"Most Suitable (Unconstrained)\",\r\n        description: \"Allocates leads always to the CA with the highest likelihood of conversion. Ignores portfolio and working hours constraints\",\r\n        allocationFunction: allocateMostSuitableUnconstrained,\r\n    },\r\n    MostSuitableAggressive: {\r\n        id: 3,\r\n        name: \"Most Suitable (Aggressive)\",\r\n        description: \"Allocates leads always to the CA with the highest likelihood of conversion. Uses lowest current allotment as a tiebreaker\",\r\n        allocationFunction: allocateMostSuitableAggressive,\r\n    },\r\n    MostSuitableFixedAllotmentTolerance: {\r\n        id: 4,\r\n        name: \"Most Suitable (Fixed allotment tolerance)\",\r\n        description: \"Allocates leads to the CA with the highest likelihood of conversion, so long as their allotment is not a \" + \r\n            \"given number of leads more than any other CA currently available. If all available CAs are outside of this tolerance, \" +\r\n            \"picks the one with the fewest leads currently allotted\",\r\n        parameters: {\r\n            allotmentTolerance: {\r\n                order: 0,\r\n                label: \"Allotment Tolerance\",\r\n            },\r\n            decayPerDay: {\r\n                order: 1,\r\n                label: \"Lead decay per day\",\r\n            },\r\n            cycleDecayDurationDays: {\r\n                order: 2,\r\n                label: \"Days per sales cycle\",\r\n            },\r\n            decayPerCycle: {\r\n                order: 3,\r\n                label: \"Lead decay per sales cycle (%)\",\r\n            },\r\n        },\r\n        allocationFunction: allocateMostSuitableFixedAllotmentLimit,\r\n    },\r\n    MostSuitableProportionalAllotmentTolerance: {\r\n        id: 5,\r\n        name: \"Most Suitable (Proportional allotment tolerance)\",\r\n        description: \"Allocates leads to the CA with the highest likelihood of conversion, so long as their allotment is not a \" + \r\n            \"number of leads more than any other CA currently available by a given percentage. If all available CAs are outside of this tolerance, \" +\r\n            \"picks the one with the fewest leads currently allotted\",\r\n        parameters: {\r\n            allotmentTolerance: {\r\n                order: 0,\r\n                label: \"Allotment Tolerance (%)\",\r\n            },\r\n            decayPerDay: {\r\n                order: 1,\r\n                label: \"Lead decay per day\",\r\n            },\r\n            cycleDecayDurationDays: {\r\n                order: 2,\r\n                label: \"Days per sales cycle\",\r\n            },\r\n            decayPerCycle: {\r\n                order: 3,\r\n                label: \"Lead decay per sales cycle (%)\",\r\n            },\r\n        },\r\n        allocationFunction: allocateMostSuitableProportionalAllotmentLimit,\r\n    },\r\n    SuitabilityAllotmentBalancedLinear: {\r\n        id: 6,\r\n        name: \"Suitability vs. Allotment Balance (Linear)\",\r\n        description: \"Allocates leads to the CA based on both their suitability and their current allotment. \" +\r\n        \"Higher suitability will increase the preference given to the CA but a higher allotment will decrease it. \" + \r\n        \"Weightings are used to control the relative importance of choosing most suitable vs. balancing allotment\",\r\n        parameters: {\r\n            suitabilityWeighting: {\r\n                order: 0,\r\n                label: \"Suitability weighting\",\r\n            },\r\n            allotmentWeighting: {\r\n                order: 1,\r\n                label: \"Allotment weighting\",\r\n            },\r\n            decayPerDay: {\r\n                order: 2,\r\n                label: \"Lead decay per day\",\r\n            },\r\n            cycleDecayDurationDays: {\r\n                order: 3,\r\n                label: \"Days per sales cycle\",\r\n            },\r\n            decayPerCycle: {\r\n                order: 4,\r\n                label: \"Lead decay per sales cycle (%)\",\r\n            },\r\n        },\r\n        allocationFunction: allocateSuitabilityAllotmentBalancedLinear,\r\n    },\r\n    SuitabilityAllotmentBalancedProportional: {\r\n        id: 6,\r\n        name: \"Suitability vs. Allotment Balance (Proportional)\",\r\n        description: \"Allocates leads to the CA based on both their suitability and their current allotment. \" +\r\n        \"Higher suitability proportionally relative to the average will increase the preference given to the CA but a higher allotment will decrease it. \" + \r\n        \"Weightings are used to control the relative importance of choosing most suitable vs. balancing allotment\",\r\n        parameters: {\r\n            suitabilityWeighting: {\r\n                order: 0,\r\n                label: \"Suitability weighting\",\r\n            },\r\n            allotmentWeighting: {\r\n                order: 1,\r\n                label: \"Allotment weighting\",\r\n            },\r\n            decayPerDay: {\r\n                order: 2,\r\n                label: \"Lead decay per day\",\r\n            },\r\n            cycleDecayDurationDays: {\r\n                order: 3,\r\n                label: \"Days per sales cycle\",\r\n            },\r\n            decayPerCycle: {\r\n                order: 4,\r\n                label: \"Lead decay per sales cycle (%)\",\r\n            },\r\n        },\r\n        allocationFunction: allocateSuitabilityAllotmentBalancedProportional,\r\n    },\r\n}\r\n\r\nconst PORTFOLIOS = {\r\n    Domestic: \"Domestic\",\r\n    Canada: \"Canada\",\r\n}\r\n\r\nconst TIMEZONES = {\r\n    Adelaide: {\r\n        startHour: 9,\r\n        endHour: 17,\r\n        timezoneOffsetFromAdelaide: 0,\r\n    },\r\n    Canada: {\r\n        startHour: 22.5,\r\n        endHour: 6.5,\r\n        timezoneOffsetFromAdelaide: 13.5,\r\n    }\r\n}\r\n\r\n\r\nfunction allocateRoundRobin(leads, courseAdvisors) {\r\n    let updatedLeads = leads.slice();\r\n    let updatedCourseAdvisors = courseAdvisors.map((advisor) => {\r\n        let newAdvisor = {...advisor};\r\n        newAdvisor.lastAllocatedId = -1;\r\n        return newAdvisor;\r\n    });\r\n\r\n    let domesticAdvisors = updatedCourseAdvisors.filter((advisor) => (\r\n        (advisor.portfolio === PORTFOLIOS.Domestic)\r\n    ));\r\n    let canadaAdvisors = updatedCourseAdvisors.filter((advisor) => (\r\n        (advisor.portfolio === PORTFOLIOS.Canada)\r\n    ));\r\n\r\n    for (let leadIndex = 0; leadIndex < leads.length; leadIndex++) {\r\n        let lead = updatedLeads[leadIndex];\r\n        let sortedAdvisors;\r\n        if (lead.portfolio === PORTFOLIOS.Domestic) {\r\n            sortedAdvisors = domesticAdvisors.sort((a,b) => a.lastAllocatedId - b.lastAllocatedId);\r\n        }\r\n        else if (lead.portfolio === PORTFOLIOS.Canada) {\r\n            sortedAdvisors = canadaAdvisors.sort((a,b) => a.lastAllocatedId - b.lastAllocatedId);\r\n        }\r\n\r\n        let filteredAdvisors = sortedAdvisors.filter((advisor) => isInWorkingHours(lead.created, advisor.location));\r\n        let selectedAdvisor = filteredAdvisors.length > 0 ? filteredAdvisors[0] : sortedAdvisors[0];\r\n\r\n        selectedAdvisor.lastAllocatedId = lead.leadId;\r\n        lead.allocatedCa = selectedAdvisor.id;\r\n        lead.allotmentAtAllocation = selectedAdvisor.currentAllotment + 1;\r\n        updatedCourseAdvisors[selectedAdvisor.id].totalAllotment++;\r\n        updatedCourseAdvisors[selectedAdvisor.id].currentAllotment++;\r\n    }\r\n\r\n    const returnObj = {\r\n        leads: updatedLeads,\r\n        courseAdvisors: updatedCourseAdvisors,\r\n    }\r\n    return returnObj;\r\n}\r\n\r\n\r\nfunction allocateRoundRobinUnconstrained(leads, courseAdvisors) {\r\n    let updatedLeads = leads.slice();\r\n    let updatedCourseAdvisors = courseAdvisors.map((advisor) => {\r\n        let newAdvisor = {...advisor};\r\n        newAdvisor.lastAllocatedId = -1;\r\n        return newAdvisor;\r\n    });\r\n\r\n    for (let leadIndex = 0; leadIndex < leads.length; leadIndex++) {\r\n        let lead = updatedLeads[leadIndex];\r\n        let sortedAdvisors = updatedCourseAdvisors.slice().sort((a,b) => a.lastAllocatedId - b.lastAllocatedId);;\r\n\r\n        let selectedAdvisor = sortedAdvisors[0];\r\n\r\n        selectedAdvisor.lastAllocatedId = lead.leadId;\r\n        lead.allocatedCa = selectedAdvisor.id;\r\n        lead.allotmentAtAllocation = selectedAdvisor.currentAllotment + 1;\r\n        updatedCourseAdvisors[selectedAdvisor.id].totalAllotment++;\r\n        updatedCourseAdvisors[selectedAdvisor.id].currentAllotment++;\r\n    }\r\n\r\n    const returnObj = {\r\n        leads: updatedLeads,\r\n        courseAdvisors: updatedCourseAdvisors,\r\n    }\r\n    return returnObj;\r\n}\r\n\r\n\r\nfunction allocateMostSuitableUnconstrained(leads, courseAdvisors) {\r\n    let updatedLeads = leads.slice();\r\n    let updatedCourseAdvisors = courseAdvisors.slice();\r\n\r\n    for (let i = 0; i < leads.length; i++) {\r\n        let lead = updatedLeads[i];        \r\n        let validAdvisors = updatedCourseAdvisors.slice();\r\n\r\n        for (let caNum = 0; caNum < validAdvisors.length; caNum++) {\r\n            let advisor = validAdvisors[caNum];\r\n            validAdvisors[caNum] = {\r\n                ...advisor, \r\n                propensity: lead.courseAdvisors[advisor.id].propensity,\r\n            }\r\n        }\r\n\r\n        validAdvisors.sort((a,b) => {\r\n            //only care about propensity. As this is an unrealistic simulation, tiebreakers are pointless\r\n            return b.propensity - a.propensity;\r\n        });\r\n\r\n        let mostSuitableCa = validAdvisors[0];\r\n        lead.allocatedCa = mostSuitableCa.id;\r\n        lead.allotmentAtAllocation = mostSuitableCa.currentAllotment + 1;\r\n        updatedCourseAdvisors[mostSuitableCa.id].totalAllotment++;\r\n        updatedCourseAdvisors[mostSuitableCa.id].currentAllotment++;\r\n    }\r\n    \r\n    const returnObj = {\r\n        leads: updatedLeads,\r\n        courseAdvisors: updatedCourseAdvisors,\r\n    }\r\n    return returnObj;\r\n}\r\n\r\n\r\nfunction allocateMostSuitableAggressive(leads, courseAdvisors) {\r\n    let updatedLeads = leads.slice();\r\n    let updatedCourseAdvisors = courseAdvisors.slice();\r\n\r\n    for (let i = 0; i < leads.length; i++) {\r\n        let lead = updatedLeads[i];        \r\n        let validAdvisors = updatedCourseAdvisors.filter((advisor) => (isMatchingPortfolio(advisor, lead)));\r\n\r\n        for (let caNum = 0; caNum < validAdvisors.length; caNum++) {\r\n            let advisor = validAdvisors[caNum];\r\n            let caIsInWorkingHours = isInWorkingHours(lead.created, updatedCourseAdvisors[advisor.id].location);\r\n            validAdvisors[caNum] = {\r\n                ...advisor, \r\n                propensity: lead.courseAdvisors[advisor.id].propensity,\r\n                isInWorkingHours: caIsInWorkingHours,\r\n            }\r\n        }\r\n\r\n        validAdvisors.sort((a,b) => {\r\n            //give firm precedence to those who are currently working\r\n            if (b.isInWorkingHours && !a.isInWorkingHours) {\r\n                return 1;\r\n            }\r\n            if (a.isInWorkingHours && !b.isInWorkingHours) {\r\n                return -1;\r\n            }\r\n            //otherwise pick the most suitable CA based on propensity\r\n            if (b.propensity !== a.propensity) {\r\n                return b.propensity - a.propensity;\r\n            }\r\n            //use allotment numbers as a tiebreaker\r\n            return a.totalAllotment - b.totalAllotment;\r\n        });\r\n\r\n        let mostSuitableCa = validAdvisors[0];\r\n        lead.allocatedCa = mostSuitableCa.id;\r\n        lead.allotmentAtAllocation = mostSuitableCa.currentAllotment + 1;\r\n        updatedCourseAdvisors[mostSuitableCa.id].totalAllotment++;\r\n        updatedCourseAdvisors[mostSuitableCa.id].currentAllotment++;\r\n    }\r\n    \r\n    const returnObj = {\r\n        leads: updatedLeads,\r\n        courseAdvisors: updatedCourseAdvisors,\r\n    }\r\n    return returnObj;\r\n}\r\n\r\n\r\nfunction allocateMostSuitableFixedAllotmentLimit(leads, courseAdvisors, parameters) {\r\n    return allocateMostSuitableWithAllotmentLimit(leads, courseAdvisors, parameters, false);\r\n}\r\n\r\n\r\nfunction allocateMostSuitableProportionalAllotmentLimit(leads, courseAdvisors, parameters) {\r\n    return allocateMostSuitableWithAllotmentLimit(leads, courseAdvisors, parameters, true);\r\n}\r\n\r\n\r\nfunction allocateMostSuitableWithAllotmentLimit(leads, courseAdvisors, parameters, isPercentage) {\r\n    let updatedLeads = leads.slice();\r\n    let updatedCourseAdvisors = courseAdvisors.slice();\r\n\r\n    //HACK: possibly not safe as this assumes that the parameters for both methods are in the same order\r\n    let tolerance = Number(parameters[ALLOCATION_MODES.MostSuitableFixedAllotmentTolerance.parameters.allotmentTolerance.order]);\r\n    if (isPercentage) {\r\n        tolerance = tolerance / 100;\r\n    }\r\n    const decayPerDay = Number(parameters[ALLOCATION_MODES.MostSuitableFixedAllotmentTolerance.parameters.decayPerDay.order]);\r\n    const cycleDecayDurationDays = Number(parameters[ALLOCATION_MODES.MostSuitableFixedAllotmentTolerance.parameters.cycleDecayDurationDays.order]);\r\n    const decayPerCycle = Number(parameters[ALLOCATION_MODES.MostSuitableFixedAllotmentTolerance.parameters.decayPerCycle.order]) / 100;\r\n    const simulationStartDate = leads[0].created.clone().startOf('date');\r\n\r\n    let lastDailyDecayDate = simulationStartDate.clone();\r\n    let lastCycleDecayDate = simulationStartDate.clone();\r\n\r\n    for (let i = 0; i < leads.length; i++) {\r\n        let lead = updatedLeads[i];\r\n        let lowestAllotment = Number.MAX_SAFE_INTEGER;\r\n        let currentDate = leads[i].created.clone().startOf('date');\r\n\r\n        //Per cycle delay, ignore if the cycle is set to zero\r\n        let cycleDelayDays = currentDate.diff(lastCycleDecayDate, 'days'); \r\n        if (cycleDecayDurationDays > 0 && cycleDelayDays >= cycleDecayDurationDays) {\r\n            let decayCyclesPassed = Math.floor(cycleDelayDays / cycleDecayDurationDays);\r\n            let totalDecayPercentage = decayPerCycle ** decayCyclesPassed;\r\n            for (let caNum = 0; caNum < updatedCourseAdvisors.length; caNum++) {\r\n                let advisor = updatedCourseAdvisors[caNum];\r\n                advisor.currentAllotment = advisor.currentAllotment * (1 - totalDecayPercentage);\r\n            }\r\n            lastCycleDecayDate.add(cycleDecayDurationDays * decayCyclesPassed, 'days');\r\n        }\r\n\r\n        //Per day delay\r\n        let dailyDecayDays = currentDate.diff(lastDailyDecayDate, 'days');\r\n        if (dailyDecayDays > 0) {\r\n            for (let caNum = 0; caNum < updatedCourseAdvisors.length; caNum++) {\r\n                let advisor = updatedCourseAdvisors[caNum];\r\n                let decayAmount = dailyDecayDays * decayPerDay * advisor.decayModifier;\r\n                advisor.currentAllotment = Math.max(advisor.currentAllotment - decayAmount, 0)\r\n            }\r\n            lastDailyDecayDate = currentDate.clone();\r\n        }\r\n        \r\n        let validAdvisors = updatedCourseAdvisors.filter((advisor) => (isMatchingPortfolio(advisor, lead)));\r\n\r\n        for (let caNum = 0; caNum < validAdvisors.length; caNum++) {\r\n            let advisor = validAdvisors[caNum];\r\n            lowestAllotment = Math.min(advisor.currentAllotment, lowestAllotment);\r\n            \r\n            let caIsInWorkingHours = isInWorkingHours(lead.created, updatedCourseAdvisors[advisor.id].location);\r\n            validAdvisors[caNum] = {\r\n                ...advisor, \r\n                propensity: lead.courseAdvisors[advisor.id].propensity,\r\n                isInWorkingHours: caIsInWorkingHours,\r\n            }\r\n        }\r\n\r\n        let allotmentCap;\r\n        if (isPercentage) {  \r\n            allotmentCap = lowestAllotment + lowestAllotment * tolerance \r\n        }\r\n        else {\r\n            allotmentCap = lowestAllotment + tolerance;\r\n        }\r\n\r\n        validAdvisors.sort((a,b) => {\r\n            //give firm precedence to those who are currently working\r\n            if (b.isInWorkingHours && !a.isInWorkingHours) {\r\n                return 1;\r\n            }\r\n            if (a.isInWorkingHours && !b.isInWorkingHours) {\r\n                return -1;\r\n            }\r\n            //then firm prededence to those within the tolerance range for allotment\r\n            if (b.currentAllotment < allotmentCap && a.currentAllotment >= allotmentCap) {\r\n                return 1;\r\n            }\r\n            if (a.currentAllotment < allotmentCap && b.currentAllotment >= allotmentCap) {\r\n                return -1;\r\n            }\r\n            //picking the person least outside tolerance if both are\r\n            if (a.currentAllotment >= allotmentCap && b.currentAllotment >= allotmentCap && b.currentAllotment !== a.currentAllotment) {\r\n                return a.currentAllotment - b.currentAllotment;\r\n            }\r\n            //otherwise picking the most suitable CA based on propensity\r\n            if (b.propensity !== a.propensity) {\r\n                return b.propensity - a.propensity;\r\n            }\r\n            //use allotment numbers as a tiebreaker\r\n            return a.currentAllotment - b.currentAllotment;\r\n        });\r\n\r\n        let mostSuitableCa = validAdvisors[0];\r\n        lead.allocatedCa = mostSuitableCa.id;\r\n        lead.allotmentAtAllocation = mostSuitableCa.currentAllotment + 1;\r\n        updatedCourseAdvisors[mostSuitableCa.id].totalAllotment++;\r\n        updatedCourseAdvisors[mostSuitableCa.id].currentAllotment = mostSuitableCa.currentAllotment + 1;\r\n    }\r\n\r\n    const returnObj = {\r\n        leads: updatedLeads,\r\n        courseAdvisors: updatedCourseAdvisors,\r\n    }\r\n    return returnObj;\r\n}\r\n\r\n\r\nfunction allocateSuitabilityAllotmentBalancedLinear(leads, courseAdvisors, parameters) {\r\n    let updatedLeads = leads.slice();\r\n    let updatedCourseAdvisors = courseAdvisors.slice();\r\n\r\n    const suitabilityWeighting = Number(parameters[ALLOCATION_MODES.SuitabilityAllotmentBalancedLinear.parameters.suitabilityWeighting.order]);\r\n    const allotmentWeighting = Number(parameters[ALLOCATION_MODES.SuitabilityAllotmentBalancedLinear.parameters.allotmentWeighting.order]);\r\n    const decayPerDay = Number(parameters[ALLOCATION_MODES.SuitabilityAllotmentBalancedLinear.parameters.decayPerDay.order]);\r\n    const cycleDecayDurationDays = Number(parameters[ALLOCATION_MODES.SuitabilityAllotmentBalancedLinear.parameters.cycleDecayDurationDays.order]);\r\n    const decayPerCycle = Number(parameters[ALLOCATION_MODES.SuitabilityAllotmentBalancedLinear.parameters.decayPerCycle.order]) / 100;\r\n    const simulationStartDate = leads[0].created.clone().startOf('date');\r\n\r\n    let lastDailyDecayDate = simulationStartDate.clone();\r\n    let lastCycleDecayDate = simulationStartDate.clone();\r\n\r\n    for (let i = 0; i < leads.length; i++) {\r\n        let lead = updatedLeads[i];\r\n        let totalAllotment = 0;\r\n        let availableAdvisors = 0;\r\n        let currentDate = leads[i].created.clone().startOf('date');\r\n\r\n        //Per cycle delay, ignore if the cycle is set to zero\r\n        let cycleDelayDays = currentDate.diff(lastCycleDecayDate, 'days'); \r\n        if (cycleDecayDurationDays > 0 && cycleDelayDays >= cycleDecayDurationDays) {\r\n            let decayCyclesPassed = Math.floor(cycleDelayDays / cycleDecayDurationDays);\r\n            let totalDecayPercentage = decayPerCycle ** decayCyclesPassed;\r\n            for (let caNum = 0; caNum < updatedCourseAdvisors.length; caNum++) {\r\n                let advisor = updatedCourseAdvisors[caNum];\r\n                advisor.currentAllotment = advisor.currentAllotment * (1 - totalDecayPercentage);\r\n            }\r\n            lastCycleDecayDate.add(cycleDecayDurationDays * cycleDelayDays, 'days');\r\n        }\r\n\r\n        //Per day delay\r\n        let dailyDecayDays = currentDate.diff(lastDailyDecayDate, 'days');\r\n        if (dailyDecayDays > 0) {\r\n            for (let caNum = 0; caNum < updatedCourseAdvisors.length; caNum++) {\r\n                let advisor = updatedCourseAdvisors[caNum];\r\n                let decayAmount = dailyDecayDays * decayPerDay * advisor.decayModifier;\r\n                advisor.currentAllotment = Math.max(advisor.currentAllotment - decayAmount, 0)\r\n            }\r\n            lastDailyDecayDate = currentDate.clone();\r\n        }\r\n        \r\n        let validAdvisors = updatedCourseAdvisors.filter((advisor) => (isMatchingPortfolio(advisor, lead)));\r\n\r\n        for (let caNum = 0; caNum < validAdvisors.length; caNum++) {\r\n            let advisor = validAdvisors[caNum];\r\n            totalAllotment = totalAllotment + advisor.currentAllotment;\r\n            availableAdvisors++;\r\n            \r\n            let caIsInWorkingHours = isInWorkingHours(lead.created, updatedCourseAdvisors[advisor.id].location);\r\n            let suitabilityScore = lead.courseAdvisors[advisor.id].propensity * suitabilityWeighting;\r\n\r\n            validAdvisors[caNum] = {\r\n                ...advisor, \r\n                suitabilityScore: suitabilityScore,\r\n                isInWorkingHours: caIsInWorkingHours,\r\n            }\r\n        }\r\n        \r\n        let averageAllotment;\r\n        if (availableAdvisors > 0) {\r\n            averageAllotment = totalAllotment / availableAdvisors;\r\n        }\r\n        else {\r\n            averageAllotment = totalAllotment / validAdvisors.length;\r\n        }\r\n\r\n        validAdvisors.sort((a,b) => {\r\n            //give firm precedence to those who are currently working\r\n            if (b.isInWorkingHours && !a.isInWorkingHours) {\r\n                return 1;\r\n            }\r\n            if (a.isInWorkingHours && !b.isInWorkingHours) {\r\n                return -1;\r\n            }\r\n\r\n            //Otherwise choosing the CA with the best overall score\r\n            let overallScoreA = a.suitabilityScore + (averageAllotment - a.currentAllotment) * allotmentWeighting;\r\n            let overallScoreB = b.suitabilityScore + (averageAllotment - b.currentAllotment) * allotmentWeighting;\r\n            if (overallScoreB !== overallScoreA) {\r\n                return overallScoreB - overallScoreA;\r\n            }\r\n\r\n            //use allotment numbers as a tiebreaker\r\n            return a.currentAllotment - b.currentAllotment;\r\n        });\r\n\r\n        let mostSuitableCa = validAdvisors[0];\r\n        lead.allocatedCa = mostSuitableCa.id;\r\n        lead.allotmentAtAllocation = mostSuitableCa.currentAllotment + 1;\r\n        updatedCourseAdvisors[mostSuitableCa.id].totalAllotment++;\r\n        updatedCourseAdvisors[mostSuitableCa.id].currentAllotment = mostSuitableCa.currentAllotment + 1;\r\n    }\r\n\r\n    const returnObj = {\r\n        leads: updatedLeads,\r\n        courseAdvisors: updatedCourseAdvisors,\r\n    }\r\n    return returnObj;\r\n}\r\n\r\n\r\nfunction allocateSuitabilityAllotmentBalancedProportional(leads, courseAdvisors, parameters) {\r\n    let updatedLeads = leads.slice();\r\n    let updatedCourseAdvisors = courseAdvisors.slice();\r\n\r\n    const suitabilityWeighting = Number(parameters[ALLOCATION_MODES.SuitabilityAllotmentBalancedProportional.parameters.suitabilityWeighting.order]);\r\n    const allotmentWeighting = Number(parameters[ALLOCATION_MODES.SuitabilityAllotmentBalancedProportional.parameters.allotmentWeighting.order]);\r\n    const decayPerDay = Number(parameters[ALLOCATION_MODES.SuitabilityAllotmentBalancedProportional.parameters.decayPerDay.order]);\r\n    const cycleDecayDurationDays = Number(parameters[ALLOCATION_MODES.SuitabilityAllotmentBalancedProportional.parameters.cycleDecayDurationDays.order]);\r\n    const decayPerCycle = Number(parameters[ALLOCATION_MODES.SuitabilityAllotmentBalancedProportional.parameters.decayPerCycle.order]) / 100;\r\n    const simulationStartDate = leads[0].created.clone().startOf('date');\r\n\r\n    let lastDailyDecayDate = simulationStartDate.clone();\r\n    let lastCycleDecayDate = simulationStartDate.clone();\r\n\r\n    for (let i = 0; i < leads.length; i++) {\r\n        let lead = updatedLeads[i];\r\n        let totalAllotment = 0;\r\n        let cumulativePropensity = 0;\r\n        let availableAdvisors = 0;\r\n        let currentDate = leads[i].created.clone().startOf('date');\r\n\r\n        //Per cycle delay, ignore if the cycle is set to zero\r\n        let cycleDelayDays = currentDate.diff(lastCycleDecayDate, 'days'); \r\n        if (cycleDecayDurationDays > 0 && cycleDelayDays >= cycleDecayDurationDays) {\r\n            let decayCyclesPassed = Math.floor(cycleDelayDays / cycleDecayDurationDays);\r\n            let totalDecayPercentage = decayPerCycle ** decayCyclesPassed;\r\n            for (let caNum = 0; caNum < updatedCourseAdvisors.length; caNum++) {\r\n                let advisor = updatedCourseAdvisors[caNum];\r\n                advisor.currentAllotment = advisor.currentAllotment * (1 - totalDecayPercentage);\r\n            }\r\n            lastCycleDecayDate.add(cycleDecayDurationDays * cycleDelayDays, 'days');\r\n        }\r\n\r\n        //Per day delay\r\n        let dailyDecayDays = currentDate.diff(lastDailyDecayDate, 'days');\r\n        if (dailyDecayDays > 0) {\r\n            for (let caNum = 0; caNum < updatedCourseAdvisors.length; caNum++) {\r\n                let advisor = updatedCourseAdvisors[caNum];\r\n                let decayAmount = dailyDecayDays * decayPerDay * advisor.decayModifier;\r\n                advisor.currentAllotment = Math.max(advisor.currentAllotment - decayAmount, 0)\r\n            }\r\n            lastDailyDecayDate = currentDate.clone();\r\n        }\r\n        \r\n        let validAdvisors = updatedCourseAdvisors.filter((advisor) => (isMatchingPortfolio(advisor, lead)));\r\n\r\n        for (let caNum = 0; caNum < validAdvisors.length; caNum++) {\r\n            let advisor = validAdvisors[caNum];\r\n            totalAllotment = totalAllotment + advisor.currentAllotment;\r\n            cumulativePropensity = cumulativePropensity + lead.courseAdvisors[advisor.id].propensity;\r\n            availableAdvisors++;\r\n            \r\n            let caIsInWorkingHours = isInWorkingHours(lead.created, updatedCourseAdvisors[advisor.id].location);\r\n            // let suitabilityScore = lead.courseAdvisors[advisor.id].propensity * suitabilityWeighting;\r\n\r\n            validAdvisors[caNum] = {\r\n                ...advisor, \r\n                // suitabilityScore: suitabilityScore,\r\n                propensity: lead.courseAdvisors[advisor.id].propensity,\r\n                isInWorkingHours: caIsInWorkingHours,\r\n            }\r\n        }\r\n        \r\n        let averageAllotment;\r\n        let averagePropensity;\r\n        if (availableAdvisors > 0) {\r\n            averageAllotment = totalAllotment / availableAdvisors;\r\n            averagePropensity = cumulativePropensity / availableAdvisors;\r\n        }\r\n        else {\r\n            averageAllotment = totalAllotment / validAdvisors.length;\r\n            averagePropensity = cumulativePropensity / validAdvisors.length;\r\n        }\r\n\r\n        validAdvisors.sort((a,b) => {\r\n            //give firm precedence to those who are currently working\r\n            if (b.isInWorkingHours && !a.isInWorkingHours) {\r\n                return 1;\r\n            }\r\n            if (a.isInWorkingHours && !b.isInWorkingHours) {\r\n                return -1;\r\n            }\r\n\r\n            //Otherwise choosing the CA with the best overall score\r\n            let overallScoreA = calculateOverallScore(a, averagePropensity, averageAllotment, suitabilityWeighting, allotmentWeighting);\r\n            let overallScoreB = calculateOverallScore(b, averagePropensity, averageAllotment, suitabilityWeighting, allotmentWeighting);\r\n            if (overallScoreB !== overallScoreA) {\r\n                return overallScoreB - overallScoreA;\r\n            }\r\n\r\n            //use allotment numbers as a tiebreaker\r\n            return a.currentAllotment - b.currentAllotment;\r\n        });\r\n\r\n        let mostSuitableCa = validAdvisors[0];\r\n        lead.allocatedCa = mostSuitableCa.id;\r\n        lead.allotmentAtAllocation = mostSuitableCa.currentAllotment + 1;\r\n        updatedCourseAdvisors[mostSuitableCa.id].totalAllotment++;\r\n        updatedCourseAdvisors[mostSuitableCa.id].currentAllotment = mostSuitableCa.currentAllotment + 1;\r\n    }\r\n\r\n    const returnObj = {\r\n        leads: updatedLeads,\r\n        courseAdvisors: updatedCourseAdvisors,\r\n    }\r\n    return returnObj;\r\n}\r\n\r\n\r\nfunction calculateOverallScore(advisor, averagePropensity, averageAllotment, suitabilityWeighting, allotmentWeighting) {\r\n    let suitabilityScore = averagePropensity > 0 ? (advisor.propensity - averagePropensity) / averagePropensity * suitabilityWeighting : 0;\r\n    let allotmentScore = (averageAllotment - advisor.currentAllotment) * allotmentWeighting\r\n    return suitabilityScore + allotmentScore;\r\n}\r\n\r\nfunction isMatchingPortfolio(advisor, lead) {\r\n    return advisor.portfolio === lead.portfolio;\r\n}\r\n\r\nfunction isInWorkingHours(datetime, location) {\r\n    let timezone = TIMEZONES[location];\r\n    let hourOfDay = datetime.hour() + datetime.minute() / 60;\r\n\r\n    //Return false for anything falling on a Saturday or Sunday\r\n    let dayOfWeek = datetime.clone().subtract(timezone.timezoneOffsetFromAdelaide, 'hours').day();\r\n    if (dayOfWeek === 0 || dayOfWeek === 6) {\r\n        return false;\r\n    }\r\n    \r\n    let effectiveEndHour = timezone.endHour;\r\n    let effectiveHourOfDay = hourOfDay;\r\n    if (timezone.endHour <= timezone.startHour) {\r\n        effectiveEndHour = timezone.endHour + 24;\r\n        if (hourOfDay < timezone.startHour) {\r\n            effectiveHourOfDay += 24;\r\n        }\r\n    }\r\n\r\n    return effectiveHourOfDay >= timezone.startHour && effectiveHourOfDay <= effectiveEndHour;\r\n}","import { ALLOCATION_MODES } from './AllocationUtils';\r\n\r\nfunction ConfigPanel(props) {\r\n\r\n    let allocationModeOptionElements = [<option key=\"unselected\" value={null} hidden/>]\r\n    allocationModeOptionElements = allocationModeOptionElements.concat(Object.keys(ALLOCATION_MODES).map((mode) => \r\n        <option key={ALLOCATION_MODES[mode].name} value={mode}>\r\n            {ALLOCATION_MODES[mode].name}\r\n        </option>));\r\n\r\n    let inputParameters = [];\r\n    if (props.selectedMode && props.selectedMode.parameters) {\r\n        const parameters = Object.keys(props.selectedMode.parameters);\r\n        for (let i = 0; i < parameters.length; i++) {\r\n            let currentParameter = props.selectedMode.parameters[parameters[i]];\r\n            inputParameters[i] = <div key={parameters[i]}>\r\n                <label htmlFor={parameters[i]}>{currentParameter.label}</label>\r\n                <input\r\n                    name={parameters[i]}\r\n                    type=\"number\"\r\n                    step=\"any\"\r\n                    onChange={(e) => props.onParameterChange(e, currentParameter.order)}\r\n                />\r\n            </div>\r\n        }\r\n    }\r\n        \r\n\r\n    return (\r\n        <div>\r\n            <select\r\n                onChange={(e) => props.onModeChange(e.target.value)}\r\n            >\r\n                {allocationModeOptionElements}\r\n            </select>\r\n            <div>\r\n                {props.selectedMode ? props.selectedMode.description : \"\"}\r\n            </div>\r\n            {inputParameters}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConfigPanel;","import React from 'react';\r\nimport { useTable } from 'react-table';\r\n\r\nexport function Table({ columns, data }) {\r\n    // Use the state and functions returned from useTable to build your UI\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    });\r\n\r\n    // Render the UI for your table\r\n    return (\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n","import { Table } from './Table';\r\nimport React from 'react';\r\n\r\n\r\nfunction ResultsPanel(props) {\r\n\r\n    const CA_RESULTS_TABLE_COLUMNS = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'CA',\r\n                accessor: 'caName',\r\n            },\r\n            {\r\n                Header: 'Portfolio',\r\n                accessor: 'portfolio'\r\n            },\r\n            {\r\n                Header: 'Location',\r\n                accessor: 'location'\r\n            },\r\n            {\r\n                Header: 'Total Allotment',\r\n                accessor: 'totalAllotment',\r\n            },\r\n            {\r\n                Header: 'Final Allotment',\r\n                accessor: 'currentAllotment',\r\n            },\r\n            {\r\n                Header: 'Average Propensity',\r\n                accessor: (row) => row ? row.averagePropensity.toFixed(3) : 0,\r\n            },\r\n            {\r\n                Header: 'Variance to Inherent',\r\n                accessor: (row) => row ? row.varianceToInherent.toFixed(3) : 0,\r\n            },\r\n            {\r\n                Header: 'Predicted Conversions',\r\n                accessor: (row) => row ? row.predictedConversions.toFixed(2) : 0,\r\n            },\r\n        ],\r\n        []\r\n    )\r\n    \r\n    const OVERALL_RESULTS_TABLE_COLUMNS = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Total Leads',\r\n                accessor: 'totalLeads',\r\n            },\r\n            {\r\n                Header: 'Average Propensity',\r\n                accessor: (row) => row ? row.averagePropensity.toFixed(3) : 0,\r\n            },\r\n            {\r\n                Header: 'Average Variance to Inherent',\r\n                accessor: (row) => row ? row.averageVarianceToInherent.toFixed(3) : 0,\r\n            },\r\n            {\r\n                Header: 'Predicted Conversions',\r\n                accessor: (row) => row ? row.predictedConversions.toFixed(2) : 0,\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>Aggregated Results</h3>\r\n            <Table columns={OVERALL_RESULTS_TABLE_COLUMNS} data={props.aggregatedResults ? [props.aggregatedResults] : []}/>\r\n            <h3>Individual CA Results</h3>\r\n            <Table columns={CA_RESULTS_TABLE_COLUMNS} data={props.courseAdvisors ? props.courseAdvisors : []}/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ResultsPanel;","import LocalFileReader from './LocalFileReader';\r\nimport { CSVDownloader } from 'react-papaparse'\r\nimport ConfigPanel from './ConfigPanel';\r\nimport React, {useState} from 'react';\r\nimport moment from 'moment';\r\n\r\nimport {ALLOCATION_MODES} from './AllocationUtils';\r\nimport ResultsPanel from './ResultsPanel';\r\n\r\nfunction LeadAllocationHome() {\r\n    const [leadData, setLeadData] = useState();\r\n    const [courseAdvisors, setCourseAdvisors] = useState();\r\n    const [selectedMode, setSelectedMode] = useState();\r\n    const [aggregatedResults, setAggregatedResults] = useState();\r\n    const [inputParameters, setInputParameters] = useState();\r\n    const [exportData, setExportData] = useState();\r\n\r\n    const DATE_FORMAT = \"YYYY-MM-DDTHH:MMZ\";\r\n\r\n\r\n    let handleCaDataLoad = (e) => {\r\n        let newCourseAdvisors = [];\r\n\r\n        for (let rowNum = 0; rowNum < e.length; rowNum++) {\r\n            let row = e[rowNum].data;\r\n            let newCa = {\r\n                id: row.id,\r\n                caName: row.name,\r\n                portfolio: row.portfolio,\r\n                location: row.location,\r\n                decayModifier: row.decayModifier,\r\n                totalAllotment: 0,\r\n                currentAllotment: 0,\r\n                cumulativePropensity: 0,\r\n                cumulativeInherent: 0,\r\n                averagePropensity: 0,\r\n                varianceToInherent: 0,\r\n                predictedConversions: 0,\r\n            }\r\n            newCourseAdvisors[rowNum] = newCa;\r\n        }\r\n\r\n        setCourseAdvisors(newCourseAdvisors);\r\n    }   \r\n\r\n    let handleLeadDataLoad = (e) => {\r\n        let leads = [];\r\n        for (let rowNum = 0; rowNum < e.length; rowNum++) {\r\n            let row = e[rowNum].data;\r\n            let newLead = {\r\n                leadId: row.leadId,\r\n                salesforceId: row.Id,\r\n                created: moment(row.created, DATE_FORMAT),\r\n                cluster: row.cluster,\r\n                inherent: row.inherent,\r\n                portfolio: row.portfolio,\r\n            };\r\n\r\n            newLead.courseAdvisors = [];\r\n            let caNames = [];\r\n            for (let caNum = 0; caNum < courseAdvisors.length; caNum++) {\r\n                caNames[caNum] = courseAdvisors[caNum].caName;\r\n            }\r\n            let caNum = 0;\r\n            for (let fieldNum = 0; fieldNum < e[rowNum].meta.fields.length; fieldNum++) {\r\n                if (caNames.some(v => v === e[rowNum].meta.fields[fieldNum])) {\r\n                    let newCa = {\r\n                        id: caNum++,\r\n                        caName: e[rowNum].meta.fields[fieldNum],\r\n                        propensity: row[e[rowNum].meta.fields[fieldNum]],\r\n                    }\r\n                    newLead.courseAdvisors.push(newCa);                    \r\n                }\r\n            }\r\n            leads[rowNum] = newLead;\r\n        }\r\n        setLeadData(leads);\r\n    } \r\n\r\n    let handleFileRemove = () => {\r\n        setLeadData();\r\n        setCourseAdvisors();\r\n        setAggregatedResults();\r\n        setInputParameters();\r\n        setExportData();\r\n    }\r\n\r\n    let handleModeChange = (selectedMode) => {\r\n        setInputParameters();\r\n        setSelectedMode(ALLOCATION_MODES[selectedMode]);\r\n    }\r\n\r\n    let handleParameterChange = (e, parameterOrder) => {\r\n        let updatedInputParameters = inputParameters ? inputParameters.slice() : [];\r\n        if (e.target.value) {\r\n            updatedInputParameters[parameterOrder] = e.target.value;\r\n        } \r\n        else {\r\n            updatedInputParameters.splice(parameterOrder);\r\n        }\r\n\r\n        setInputParameters(updatedInputParameters);\r\n    }\r\n\r\n    let runSimulation = () => {\r\n        const result = generateResults(selectedMode.allocationFunction(leadData, courseAdvisors, inputParameters));\r\n\r\n        setLeadData(result.leads);\r\n        setCourseAdvisors(result.courseAdvisors);\r\n        setAggregatedResults(result.aggregatedResults);\r\n        setExportData(result.exportData);\r\n    }\r\n\r\n    let generateResults = (result) =>  {\r\n        let updatedCourseAdvisors = result.courseAdvisors.slice();\r\n        for (let leadNum = 0; leadNum < result.leads.length; leadNum++) {\r\n            let lead = result.leads[leadNum];\r\n            let allocatedCa = updatedCourseAdvisors[lead.allocatedCa];\r\n            let selectedPropensity = lead.courseAdvisors[allocatedCa.id].propensity;\r\n            allocatedCa.cumulativePropensity = allocatedCa.cumulativePropensity + selectedPropensity;\r\n            allocatedCa.cumulativeInherent = allocatedCa.cumulativeInherent + lead.inherent;\r\n        }\r\n\r\n        let aggregatedResults = {\r\n            totalLeads: 0,\r\n            cumulativePropensity: 0,\r\n            cumulativeInherent: 0,\r\n            averagePropensity: 0,\r\n            averageVarianceToInherent: 0,\r\n            predictedConversions: 0,\r\n        }\r\n        for (let caNum = 0; caNum < updatedCourseAdvisors.length; caNum++) {\r\n            let advisor = updatedCourseAdvisors[caNum];\r\n            advisor.averagePropensity = advisor.totalAllotment ? advisor.cumulativePropensity / advisor.totalAllotment : 0;\r\n            advisor.varianceToInherent = advisor.cumulativePropensity - advisor.cumulativeInherent;\r\n            advisor.predictedConversions = advisor.totalAllotment * advisor.averagePropensity;\r\n\r\n            aggregatedResults.totalLeads += advisor.totalAllotment;\r\n            aggregatedResults.cumulativePropensity += advisor.cumulativePropensity;\r\n            aggregatedResults.cumulativeInherent += advisor.cumulativeInherent;\r\n            aggregatedResults.predictedConversions += advisor.predictedConversions;\r\n        }\r\n        aggregatedResults.averagePropensity = aggregatedResults.cumulativePropensity / aggregatedResults.totalLeads;\r\n        aggregatedResults.averageVarianceToInherent = (aggregatedResults.cumulativePropensity - aggregatedResults.cumulativeInherent) / updatedCourseAdvisors.length;\r\n\r\n        let updatedResult = {...result};\r\n        updatedResult.courseAdvisors = updatedCourseAdvisors;\r\n        updatedResult.aggregatedResults = aggregatedResults;\r\n\r\n        updatedResult = generateExportData(updatedResult);\r\n\r\n        return updatedResult;\r\n    }\r\n\r\n\r\n    let generateExportData = (result) => {\r\n        let adjustedLeads = leadData.slice().map((lead) => {\r\n            let newLead = {...lead};\r\n            newLead.created = newLead.created.format(DATE_FORMAT);\r\n            newLead.allocatedCa = courseAdvisors[newLead.allocatedCa].caName;\r\n            delete newLead.courseAdvisors;\r\n\r\n            return newLead;\r\n        });\r\n\r\n        let updatedResult = {...result};\r\n        updatedResult.exportData = adjustedLeads;\r\n\r\n        return updatedResult;\r\n    }\r\n\r\n\r\n    let getExportFilename = () => {\r\n        let filename = \"invalid-nodata\"\r\n        if (aggregatedResults && selectedMode) {\r\n            filename = Object.keys(ALLOCATION_MODES)[selectedMode.id] + \"-\" + moment().format(\"YYYYMMDD-HHMM-ss\")\r\n        }\r\n        return filename;\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <h3>CA File</h3>\r\n                <LocalFileReader\r\n                // CA Data\r\n                    onFileLoad={(e) => handleCaDataLoad(e)}\r\n                    onFileRemove={() => handleFileRemove()}\r\n                />\r\n                <h3>Lead File</h3>\r\n                <LocalFileReader\r\n                // Lead Data\r\n                    onFileLoad={(e) => handleLeadDataLoad(e)}\r\n                    onFileRemove={() => handleFileRemove()}\r\n                    disabled={!(courseAdvisors && courseAdvisors.length > 0)}\r\n                />\r\n                <ConfigPanel\r\n                    selectedMode={selectedMode}\r\n                    onModeChange={(e) => handleModeChange(e)}\r\n                    onParameterChange={(e, parameter) => handleParameterChange(e, parameter)}\r\n                />\r\n                <button\r\n                    onClick={() => runSimulation()}\r\n                    disabled={!leadData || !selectedMode || \r\n                        (selectedMode.parameters && (!inputParameters || inputParameters.length < Object.keys(selectedMode.parameters).length))}\r\n                >\r\n                    Run Simulation\r\n                </button>\r\n                <CSVDownloader\r\n                    data={exportData}\r\n                    type={\"button\"}\r\n                    filename={getExportFilename()}\r\n                    bom={false}\r\n                >\r\n                    Export Results\r\n                </CSVDownloader>\r\n                <ResultsPanel\r\n                    courseAdvisors={courseAdvisors}\r\n                    aggregatedResults={aggregatedResults}\r\n                />\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default LeadAllocationHome;\r\n\r\n\r\n\r\n/*\r\nAllocation Mode: manual, round robin, linear weighted, polynomial weighted, optimised round robin (leeway of n)\r\nInput data (csv load)\r\nRandomise order\r\nAuto-allocate\r\n\r\nSummaries: overall result score (raw conversions, variance to inherent)\r\n\r\nIndividual leads (allocated CA [freeze], inherent, per CA propensity)\r\n\r\n*/","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport LeadAllocationHome from './LeadAllocationHome';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <LeadAllocationHome />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}