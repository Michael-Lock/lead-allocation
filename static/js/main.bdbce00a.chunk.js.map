{"version":3,"sources":["LocalFileReader.js","AllocationUtils.js","ConfigPanel.js","Table.js","ResultsPanel.js","LeadAllocationHome.js","reportWebVitals.js","index.js"],"names":["LocalFileReader","props","handleOpenDialog","e","state","buttonRef","current","open","handleOnFileLoad","data","onFileLoad","handleOnError","err","file","inputElem","reason","console","log","handleOnRemoveFile","onFileRemove","handleRemoveFile","removeFile","React","createRef","ref","this","onError","noClick","noDrag","config","header","dynamicTyping","skipEmptyLines","onRemoveFile","style","display","flexDirection","marginBottom","type","onClick","disabled","borderRadius","marginLeft","marginRight","width","paddingLeft","paddingRight","borderWidth","borderStyle","borderColor","height","lineHeight","marginTop","paddingTop","name","Component","ALLOCATION_MODES","RoundRobin","id","description","allocationFunction","leads","courseAdvisors","updatedLeads","slice","updatedCourseAdvisors","map","advisor","newAdvisor","lastAllocatedId","domesticAdvisors","filter","portfolio","PORTFOLIOS","canadaAdvisors","leadIndex","lead","sortedAdvisors","sort","a","b","filteredAdvisors","isInWorkingHours","created","location","selectedAdvisor","length","leadId","allocatedCa","currentAllotment","MostSuitableAggressive","i","validAdvisors","isMatchingPortfolio","caNum","caIsInWorkingHours","propensity","mostSuitableCa","MostSuitableFixedAllotmentTolerance","parameters","allotmentTolerance","order","label","decayPerDay","tolerance","simulationStartDate","clone","startOf","lowestAllotment","Number","MAX_SAFE_INTEGER","daysFromStart","diff","advisorDecayedAllotment","Math","max","decayedAllotment","MostSuitableProportionalAllotmentTolerance","allotmentCap","TIMEZONES","Adelaide","startHour","endHour","timezoneOffsetFromAdelaide","Canada","datetime","timezone","hourOfDay","hour","minute","dayOfWeek","subtract","day","effectiveEndHour","effectiveHourOfDay","ConfigPanel","allocationModeOptionElements","value","hidden","concat","Object","keys","mode","inputParameters","selectedMode","currentParameter","htmlFor","step","onChange","onParameterChange","onModeChange","target","Table","columns","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","ResultsPanel","CA_RESULTS_TABLE_COLUMNS","useMemo","Header","accessor","averagePropensity","toFixed","varianceToInherent","predictedConversions","OVERALL_RESULTS_TABLE_COLUMNS","averageVarianceToInherent","aggregatedResults","LeadAllocationHome","useState","leadData","setLeadData","setCourseAdvisors","setSelectedMode","setAggregatedResults","setInputParameters","NON_CA_FIELDS","handleFileRemove","generateResults","result","leadNum","selectedPropensity","cumulativePropensity","cumulativeInherent","inherent","totalLeads","updatedResult","className","newCourseAdvisors","rowNum","newCa","caName","handleCaDataLoad","newLead","moment","fieldNum","some","v","meta","fields","push","handleLeadDataLoad","handleModeChange","parameter","parameterOrder","updatedInputParameters","splice","handleParameterChange","runSimulation","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdbce00a.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport { CSVReader } from 'react-papaparse'\r\n\r\n\r\n\r\nexport default class LocalFileReader extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            buttonRef: React.createRef()\r\n        }\r\n    }    \r\n    \r\n  handleOpenDialog = (e) => {\r\n    // Note that the ref is set async, so it might be null at some point\r\n    if (this.state.buttonRef.current) {\r\n      this.state.buttonRef.current.open(e)\r\n    }\r\n  }\r\n\r\n  handleOnFileLoad = (data) => {\r\n    return this.props.onFileLoad(data);\r\n  }\r\n\r\n  handleOnError = (err, file, inputElem, reason) => {\r\n    console.log(err)\r\n  }\r\n\r\n  handleOnRemoveFile = (data) => {\r\n    return this.props.onFileRemove();\r\n  }\r\n\r\n  handleRemoveFile = (e) => {\r\n    // Note that the ref is set async, so it might be null at some point\r\n    if (this.state.buttonRef.current) {\r\n        this.state.buttonRef.current.removeFile(e)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <CSVReader\r\n        ref={this.state.buttonRef ? this.state.buttonRef : null}\r\n        onFileLoad={this.handleOnFileLoad}\r\n        onError={this.handleOnError}\r\n        noClick\r\n        noDrag\r\n        config={\r\n            {\r\n                header: true,\r\n                dynamicTyping: true,\r\n                skipEmptyLines: true,\r\n            }\r\n        }\r\n        onRemoveFile={this.handleOnRemoveFile}\r\n      >\r\n        {({ file }) => (\r\n          <aside\r\n            style={{\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n              marginBottom: 10\r\n            }}\r\n          >\r\n            <button\r\n              type='button'\r\n              onClick={this.handleOpenDialog}\r\n              disabled={this.props.disabled}\r\n              style={{\r\n                borderRadius: 0,\r\n                marginLeft: 0,\r\n                marginRight: 0,\r\n                width: '40%',\r\n                paddingLeft: 0,\r\n                paddingRight: 0\r\n              }}\r\n            >\r\n              Browse file\r\n            </button>\r\n            <div\r\n              style={{\r\n                borderWidth: 1,\r\n                borderStyle: 'solid',\r\n                borderColor: '#ccc',\r\n                height: 45,\r\n                lineHeight: 2.5,\r\n                marginTop: 5,\r\n                marginBottom: 5,\r\n                paddingLeft: 13,\r\n                paddingTop: 3,\r\n                width: '60%'\r\n              }}\r\n            >\r\n              {file && file.name}\r\n            </div>\r\n            <button\r\n              style={{\r\n                borderRadius: 0,\r\n                marginLeft: 0,\r\n                marginRight: 0,\r\n                paddingLeft: 20,\r\n                paddingRight: 20\r\n              }}\r\n              onClick={this.handleRemoveFile}\r\n            >\r\n              Remove\r\n            </button>\r\n          </aside>\r\n        )}\r\n      </CSVReader>\r\n    )\r\n  }\r\n}","\r\n\r\nexport const ALLOCATION_MODES = {\r\n    RoundRobin: {\r\n        id: 0,\r\n        name: \"Round Robin\",\r\n        description: \"Allocates leads one by one to each available CA\",\r\n        allocationFunction: allocateRoundRobin,\r\n    },\r\n    MostSuitableAggressive: {\r\n        id: 1,\r\n        name: \"Most Suitable (Aggressive)\",\r\n        description: \"Allocates leads always to the CA with the highest likelihood of conversion. Uses lowest current allotment as a tiebreaker\",\r\n        allocationFunction: allocateMostSuitableAggressive,\r\n    },\r\n    MostSuitableFixedAllotmentTolerance: {\r\n        id: 2,\r\n        name: \"Most Suitable (Fixed allotment tolerance)\",\r\n        description: \"Allocates leads to the CA with the highest likelihood of conversion, so long as their allotment is not a \" + \r\n            \"given number of leads more than any other CA currently available. If all available CAs are outside of this tolerance, \" +\r\n            \"picks the one with the fewest leads currently allotted\",\r\n        parameters: {\r\n            allotmentTolerance: {\r\n                order: 0,\r\n                label: \"Allotment Tolerance\",\r\n            },\r\n            decayPerDay: {\r\n                order: 1,\r\n                label: \"Lead decay per day\",\r\n            },\r\n        },\r\n        allocationFunction: allocateMostSuitableFixedAllotmentLimit,\r\n    },\r\n    MostSuitableProportionalAllotmentTolerance: {\r\n        id: 3,\r\n        name: \"Most Suitable (Proportional allotment tolerance)\",\r\n        description: \"Allocates leads to the CA with the highest likelihood of conversion, so long as their allotment is not a \" + \r\n            \"number of leads more than any other CA currently available by a given percentage. If all available CAs are outside of this tolerance, \" +\r\n            \"picks the one with the fewest leads currently allotted\",\r\n        parameters: {\r\n            allotmentTolerance: {\r\n                order: 0,\r\n                label: \"Allotment Tolerance (%)\",\r\n            },\r\n            decayPerDay: {\r\n                order: 1,\r\n                label: \"Lead decay per day\",\r\n            },\r\n        },\r\n        allocationFunction: allocateMostSuitableProportionalAllotmentLimit,\r\n    },\r\n}\r\n\r\nconst PORTFOLIOS = {\r\n    Domestic: \"Domestic\",\r\n    Canada: \"Canada\",\r\n}\r\n\r\nconst TIMEZONES = {\r\n    Adelaide: {\r\n        startHour: 9,\r\n        endHour: 17,\r\n        timezoneOffsetFromAdelaide: 0,\r\n    },\r\n    Canada: {\r\n        startHour: 22.5,\r\n        endHour: 6.5,\r\n        timezoneOffsetFromAdelaide: 13.5,\r\n    }\r\n}\r\n\r\n\r\nfunction allocateRoundRobin(leads, courseAdvisors) {\r\n    let updatedLeads = leads.slice();\r\n    let updatedCourseAdvisors = courseAdvisors.map((advisor) => {\r\n        let newAdvisor = {...advisor};\r\n        newAdvisor.lastAllocatedId = -1;\r\n        return newAdvisor;\r\n    });\r\n\r\n    let domesticAdvisors = updatedCourseAdvisors.filter((advisor) => (\r\n        (advisor.portfolio === PORTFOLIOS.Domestic)\r\n    ));\r\n    let canadaAdvisors = updatedCourseAdvisors.filter((advisor) => (\r\n        (advisor.portfolio === PORTFOLIOS.Canada)\r\n    ));\r\n\r\n    for (let leadIndex = 0; leadIndex < leads.length; leadIndex++) {\r\n        let lead = updatedLeads[leadIndex];\r\n        let sortedAdvisors;\r\n        if (lead.portfolio === PORTFOLIOS.Domestic) {\r\n            sortedAdvisors = domesticAdvisors.sort((a,b) => a.lastAllocatedId - b.lastAllocatedId);\r\n        }\r\n        else if (lead.portfolio === PORTFOLIOS.Canada) {\r\n            sortedAdvisors = canadaAdvisors.sort((a,b) => a.lastAllocatedId - b.lastAllocatedId);\r\n        }\r\n\r\n        let filteredAdvisors = sortedAdvisors.filter((advisor) => isInWorkingHours(lead.created, advisor.location));\r\n        let selectedAdvisor = filteredAdvisors.length > 0 ? filteredAdvisors[0] : sortedAdvisors[0];\r\n\r\n        selectedAdvisor.lastAllocatedId = lead.leadId;\r\n        lead.allocatedCa = selectedAdvisor.id;\r\n        updatedCourseAdvisors[selectedAdvisor.id].currentAllotment++;\r\n    }\r\n\r\n    const returnObj = {\r\n        leads: updatedLeads,\r\n        courseAdvisors: updatedCourseAdvisors,\r\n    }\r\n    return returnObj;\r\n}\r\n\r\n\r\nfunction allocateMostSuitableAggressive(leads, courseAdvisors) {\r\n    let updatedLeads = leads.slice();\r\n    let updatedCourseAdvisors = courseAdvisors.slice();\r\n\r\n    for (let i = 0; i < leads.length; i++) {\r\n        let lead = updatedLeads[i];        \r\n        let validAdvisors = updatedCourseAdvisors.filter((advisor) => (isMatchingPortfolio(advisor, lead)));\r\n\r\n        for (let caNum = 0; caNum < validAdvisors.length; caNum++) {\r\n            let advisor = validAdvisors[caNum];\r\n            let caIsInWorkingHours = isInWorkingHours(lead.created, updatedCourseAdvisors[advisor.id].location);\r\n            validAdvisors[caNum] = {\r\n                ...advisor, \r\n                propensity: lead.courseAdvisors[advisor.id].propensity,\r\n                isInWorkingHours: caIsInWorkingHours,\r\n            }\r\n        }\r\n\r\n        validAdvisors.sort((a,b) => {\r\n            //give firm precedence to those who are currently working\r\n            if (b.isInWorkingHours && !a.isInWorkingHours) {\r\n                return 1;\r\n            }\r\n            if (a.isInWorkingHours && !b.isInWorkingHours) {\r\n                return -1;\r\n            }\r\n            //otherwise pick the most suitable CA based on propensity\r\n            if (b.propensity !== a.propensity) {\r\n                return b.propensity - a.propensity;\r\n            }\r\n            //use allotment numbers as a tiebreaker\r\n            return a.currentAllotment - b.currentAllotment;\r\n        });\r\n\r\n        let mostSuitableCa = validAdvisors[0];\r\n        lead.allocatedCa = mostSuitableCa.id;\r\n        updatedCourseAdvisors[mostSuitableCa.id].currentAllotment++;\r\n    }\r\n    \r\n    const returnObj = {\r\n        leads: updatedLeads,\r\n        courseAdvisors: updatedCourseAdvisors,\r\n    }\r\n    return returnObj;\r\n}\r\n\r\n\r\nfunction allocateMostSuitableFixedAllotmentLimit(leads, courseAdvisors, parameters) {\r\n    let updatedLeads = leads.slice();\r\n    let updatedCourseAdvisors = courseAdvisors.slice();\r\n\r\n    const tolerance = parameters[ALLOCATION_MODES.MostSuitableFixedAllotmentTolerance.parameters.allotmentTolerance.order];\r\n    const decayPerDay = parameters[ALLOCATION_MODES.MostSuitableFixedAllotmentTolerance.parameters.decayPerDay.order]\r\n    const simulationStartDate = leads[0].created.clone().startOf('date');\r\n\r\n    for (let i = 0; i < leads.length; i++) {\r\n        let lead = updatedLeads[i];\r\n        let lowestAllotment = Number.MAX_SAFE_INTEGER;\r\n        let daysFromStart = leads[i].created.clone().startOf('date').diff(simulationStartDate, 'days');\r\n        \r\n        let validAdvisors = updatedCourseAdvisors.filter((advisor) => (isMatchingPortfolio(advisor, lead)));\r\n\r\n        for (let caNum = 0; caNum < validAdvisors.length; caNum++) {\r\n            let advisor = validAdvisors[caNum];\r\n            let advisorDecayedAllotment = Math.max(advisor.currentAllotment - daysFromStart * decayPerDay, 0);\r\n\r\n            lowestAllotment = advisorDecayedAllotment < lowestAllotment ? advisorDecayedAllotment : lowestAllotment;\r\n            let caIsInWorkingHours = isInWorkingHours(lead.created, updatedCourseAdvisors[advisor.id].location);\r\n            validAdvisors[caNum] = {\r\n                ...advisor, \r\n                propensity: lead.courseAdvisors[advisor.id].propensity,\r\n                decayedAllotment: advisorDecayedAllotment,\r\n                isInWorkingHours: caIsInWorkingHours,\r\n            }\r\n        }\r\n\r\n        validAdvisors.sort((a,b) => {\r\n            //give firm precedence to those who are currently working\r\n            if (b.isInWorkingHours && !a.isInWorkingHours) {\r\n                return 1;\r\n            }\r\n            if (a.isInWorkingHours && !b.isInWorkingHours) {\r\n                return -1;\r\n            }\r\n            //then firm prededence to those within the tolerance range for allotment\r\n            if (b.decayedAllotment - lowestAllotment < tolerance && a.decayedAllotment - lowestAllotment >= tolerance) {\r\n                return 1;\r\n            }\r\n            if (a.decayedAllotment - lowestAllotment < tolerance && b.decayedAllotment - lowestAllotment >= tolerance) {\r\n                return -1;\r\n            }\r\n            //picking the person least outside tolerance if both are\r\n            if (a.decayedAllotment - lowestAllotment >= tolerance && b.decayedAllotment - lowestAllotment >= tolerance && b.decayedAllotment !== a.decayedAllotment) {\r\n                return a.decayedAllotment - b.decayedAllotment;\r\n            }\r\n            //otherwise picking the most suitable CA based on propensity\r\n            if (b.propensity !== a.propensity) {\r\n                return b.propensity - a.propensity;\r\n            }\r\n            //use allotment numbers as a tiebreaker\r\n            return a.decayedAllotment - b.decayedAllotment;\r\n        });\r\n\r\n        let mostSuitableCa = validAdvisors[0];\r\n        lead.allocatedCa = mostSuitableCa.id;\r\n        updatedCourseAdvisors[mostSuitableCa.id].currentAllotment++;\r\n    }\r\n    \r\n    const returnObj = {\r\n        leads: updatedLeads,\r\n        courseAdvisors: updatedCourseAdvisors,\r\n    }\r\n    return returnObj;\r\n}\r\n\r\n\r\nfunction allocateMostSuitableProportionalAllotmentLimit(leads, courseAdvisors, parameters) {\r\n    let updatedLeads = leads.slice();\r\n    let updatedCourseAdvisors = courseAdvisors.slice();\r\n\r\n    const tolerance = parameters[ALLOCATION_MODES.MostSuitableFixedAllotmentTolerance.parameters.allotmentTolerance.order] / 100;\r\n    const decayPerDay = parameters[ALLOCATION_MODES.MostSuitableFixedAllotmentTolerance.parameters.decayPerDay.order]\r\n    const simulationStartDate = leads[0].created.clone().startOf('date');\r\n\r\n    for (let i = 0; i < leads.length; i++) {\r\n        let lead = updatedLeads[i];\r\n        let lowestAllotment = Number.MAX_SAFE_INTEGER;\r\n        let daysFromStart = leads[i].created.clone().startOf('date').diff(simulationStartDate, 'days');\r\n        \r\n        let validAdvisors = updatedCourseAdvisors.filter((advisor) => (isMatchingPortfolio(advisor, lead)));\r\n\r\n        for (let caNum = 0; caNum < validAdvisors.length; caNum++) {\r\n            let advisor = validAdvisors[caNum];\r\n            let advisorDecayedAllotment = Math.max(advisor.currentAllotment - daysFromStart * decayPerDay, 0);\r\n\r\n            lowestAllotment = advisorDecayedAllotment < lowestAllotment ? advisorDecayedAllotment : lowestAllotment;\r\n            let caIsInWorkingHours = isInWorkingHours(lead.created, updatedCourseAdvisors[advisor.id].location);\r\n            validAdvisors[caNum] = {\r\n                ...advisor, \r\n                propensity: lead.courseAdvisors[advisor.id].propensity,\r\n                decayedAllotment: advisorDecayedAllotment,\r\n                isInWorkingHours: caIsInWorkingHours,\r\n            }\r\n        }\r\n\r\n        let allotmentCap = lowestAllotment + lowestAllotment * tolerance;\r\n\r\n        validAdvisors.sort((a,b) => {\r\n            //give firm precedence to those who are currently working\r\n            if (b.isInWorkingHours && !a.isInWorkingHours) {\r\n                return 1;\r\n            }\r\n            if (a.isInWorkingHours && !b.isInWorkingHours) {\r\n                return -1;\r\n            }\r\n            //then firm prededence to those within the tolerance range for allotment\r\n            if (b.decayedAllotment < allotmentCap && a.decayedAllotment >= allotmentCap) {\r\n                return 1;\r\n            }\r\n            if (a.decayedAllotment < allotmentCap && b.decayedAllotment >= allotmentCap) {\r\n                return -1;\r\n            }\r\n            //picking the person least outside tolerance if both are\r\n            if (a.decayedAllotment >= allotmentCap && b.decayedAllotment >= allotmentCap && b.decayedAllotment !== a.decayedAllotment) {\r\n                return a.decayedAllotment - b.decayedAllotment;\r\n            }\r\n            //otherwise picking the most suitable CA based on propensity\r\n            if (b.propensity !== a.propensity) {\r\n                return b.propensity - a.propensity;\r\n            }\r\n            //use allotment numbers as a tiebreaker\r\n            return a.decayedAllotment - b.decayedAllotment;\r\n        });\r\n\r\n        let mostSuitableCa = validAdvisors[0];\r\n        lead.allocatedCa = mostSuitableCa.id;\r\n        updatedCourseAdvisors[mostSuitableCa.id].currentAllotment++;\r\n    }\r\n\r\n    const returnObj = {\r\n        leads: updatedLeads,\r\n        courseAdvisors: updatedCourseAdvisors,\r\n    }\r\n    return returnObj;\r\n}\r\n\r\n\r\nfunction isMatchingPortfolio(advisor, lead) {\r\n    return advisor.portfolio === lead.portfolio;\r\n}\r\n\r\nfunction isInWorkingHours(datetime, location) {\r\n    let timezone = TIMEZONES[location];\r\n    let hourOfDay = datetime.hour() + datetime.minute() / 60;\r\n\r\n    //Return false for anything falling on a Saturday or Sunday\r\n    let dayOfWeek = datetime.clone().subtract(timezone.timezoneOffsetFromAdelaide, 'hours').day();\r\n    if (dayOfWeek === 0 || dayOfWeek === 6) {\r\n        return false;\r\n    }\r\n    \r\n    let effectiveEndHour = timezone.endHour;\r\n    let effectiveHourOfDay = hourOfDay;\r\n    if (timezone.endHour <= timezone.startHour) {\r\n        effectiveEndHour = timezone.endHour + 24;\r\n        if (hourOfDay < timezone.startHour) {\r\n            effectiveHourOfDay += 24;\r\n        }\r\n    }\r\n\r\n    return effectiveHourOfDay >= timezone.startHour && effectiveHourOfDay <= effectiveEndHour;\r\n}","import { ALLOCATION_MODES } from './AllocationUtils';\r\n\r\nfunction ConfigPanel(props) {\r\n\r\n    let allocationModeOptionElements = [<option key=\"unselected\" value={null} hidden/>]\r\n    allocationModeOptionElements = allocationModeOptionElements.concat(Object.keys(ALLOCATION_MODES).map((mode) => \r\n        <option key={ALLOCATION_MODES[mode].name} value={mode}>\r\n            {ALLOCATION_MODES[mode].name}\r\n        </option>));\r\n\r\n    let inputParameters = [];\r\n    if (props.selectedMode && props.selectedMode.parameters) {\r\n        const parameters = Object.keys(props.selectedMode.parameters);\r\n        for (let i = 0; i < parameters.length; i++) {\r\n            let currentParameter = props.selectedMode.parameters[parameters[i]];\r\n            inputParameters[i] = <div key={parameters[i]}>\r\n                <label htmlFor={parameters[i]}>{currentParameter.label}</label>\r\n                <input\r\n                    name={parameters[i]}\r\n                    type=\"number\"\r\n                    step=\"any\"\r\n                    onChange={(e) => props.onParameterChange(e, currentParameter.order)}\r\n                />\r\n            </div>\r\n        }\r\n    }\r\n        \r\n\r\n    return (\r\n        <div>\r\n            <select\r\n                onChange={(e) => props.onModeChange(e.target.value)}\r\n            >\r\n                {allocationModeOptionElements}\r\n            </select>\r\n            <div>\r\n                {props.selectedMode ? props.selectedMode.description : \"\"}\r\n            </div>\r\n            {inputParameters}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConfigPanel;","import React from 'react';\r\nimport { useTable } from 'react-table';\r\n\r\nexport function Table({ columns, data }) {\r\n    // Use the state and functions returned from useTable to build your UI\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    });\r\n\r\n    // Render the UI for your table\r\n    return (\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n","import { Table } from './Table';\r\nimport React from 'react';\r\n\r\n\r\nfunction ResultsPanel(props) {\r\n\r\n    const CA_RESULTS_TABLE_COLUMNS = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'CA',\r\n                accessor: 'caName',\r\n            },\r\n            {\r\n                Header: 'Portfolio',\r\n                accessor: 'portfolio'\r\n            },\r\n            {\r\n                Header: 'Location',\r\n                accessor: 'location'\r\n            },\r\n            {\r\n                Header: 'Allotment',\r\n                accessor: 'currentAllotment',\r\n            },\r\n            {\r\n                Header: 'Average Propensity',\r\n                accessor: (row) => row ? row.averagePropensity.toFixed(2) : 0,\r\n            },\r\n            {\r\n                Header: 'Variance to Inherent',\r\n                accessor: (row) => row ? row.varianceToInherent.toFixed(2) : 0,\r\n            },\r\n            {\r\n                Header: 'Predicted Conversions',\r\n                accessor: (row) => row ? row.predictedConversions.toFixed(2) : 0,\r\n            },\r\n        ],\r\n        []\r\n    )\r\n    \r\n    const OVERALL_RESULTS_TABLE_COLUMNS = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Total Leads',\r\n                accessor: 'totalLeads',\r\n            },\r\n            {\r\n                Header: 'Average Propensity',\r\n                accessor: (row) => row ? row.averagePropensity.toFixed(2) : 0,\r\n            },\r\n            {\r\n                Header: 'Average Variance to Inherent',\r\n                accessor: (row) => row ? row.averageVarianceToInherent.toFixed(2) : 0,\r\n            },\r\n            {\r\n                Header: 'Predicted Conversions',\r\n                accessor: (row) => row ? row.predictedConversions.toFixed(2) : 0,\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>Aggregated Results</h3>\r\n            <Table columns={OVERALL_RESULTS_TABLE_COLUMNS} data={props.aggregatedResults ? [props.aggregatedResults] : []}/>\r\n            <h3>Individual CA Results</h3>\r\n            <Table columns={CA_RESULTS_TABLE_COLUMNS} data={props.courseAdvisors ? props.courseAdvisors : []}/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ResultsPanel;","import LocalFileReader from './LocalFileReader';\r\nimport ConfigPanel from './ConfigPanel';\r\nimport React, {useState} from 'react';\r\nimport moment from 'moment';\r\n\r\nimport {ALLOCATION_MODES} from './AllocationUtils';\r\nimport ResultsPanel from './ResultsPanel';\r\n\r\nfunction LeadAllocationHome() {\r\n    const [leadData, setLeadData] = useState();\r\n    const [courseAdvisors, setCourseAdvisors] = useState();\r\n    const [selectedMode, setSelectedMode] = useState();\r\n    const [aggregatedResults, setAggregatedResults] = useState();\r\n    const [inputParameters, setInputParameters] = useState();\r\n\r\n\r\n\r\n    const NON_CA_FIELDS = [\"leadId\", \"created\", \"inherent\", \"portfolio\"];\r\n    let handleLeadDataLoad = (e) => {\r\n        let leads = [];\r\n        for (let rowNum = 0; rowNum < e.length; rowNum++) {\r\n            let row = e[rowNum].data;\r\n            let newLead = {\r\n                leadId: row.leadId,\r\n                // created: moment(row.created, \"DD/MM/YYYY hh:mm\"),\r\n                created: moment(row.created, \"YYYY-MM-DDTHH:MMZ\"),\r\n                inherent: row.inherent,\r\n                portfolio: row.portfolio,\r\n            };\r\n\r\n            newLead.courseAdvisors = [];\r\n            let caNum = 0;\r\n            for (let fieldNum = 0; fieldNum < e[rowNum].meta.fields.length; fieldNum++) {\r\n                if (NON_CA_FIELDS.some(v => v === e[rowNum].meta.fields[fieldNum])) {\r\n                    continue;\r\n                }\r\n                let newCa = {\r\n                    id: caNum++,\r\n                    caName: e[rowNum].meta.fields[fieldNum],\r\n                    propensity: row[e[rowNum].meta.fields[fieldNum]],\r\n                }\r\n                newLead.courseAdvisors.push(newCa);\r\n            }\r\n            leads[rowNum] = newLead;\r\n        }\r\n        setLeadData(leads);\r\n    }\r\n\r\n    let handleCaDataLoad = (e) => {\r\n        let newCourseAdvisors = [];\r\n\r\n        for (let rowNum = 0; rowNum < e.length; rowNum++) {\r\n            let row = e[rowNum].data;\r\n            let newCa = {\r\n                id: row.id,\r\n                caName: row.name,\r\n                portfolio: row.portfolio,\r\n                location: row.location,\r\n                currentAllotment: 0,\r\n                cumulativePropensity: 0,\r\n                cumulativeInherent: 0,\r\n                averagePropensity: 0,\r\n                varianceToInherent: 0,\r\n                predictedConversions: 0,\r\n            }\r\n            newCourseAdvisors[rowNum] = newCa;\r\n        }\r\n\r\n        setCourseAdvisors(newCourseAdvisors);\r\n    }    \r\n\r\n    let handleFileRemove = () => {\r\n        setLeadData();\r\n        setCourseAdvisors();\r\n        setAggregatedResults();\r\n        setInputParameters();\r\n    }\r\n\r\n    let handleModeChange = (selectedMode) => {\r\n        setInputParameters();\r\n        setSelectedMode(ALLOCATION_MODES[selectedMode]);\r\n    }\r\n\r\n    let handleParameterChange = (e, parameterOrder) => {\r\n        let updatedInputParameters = inputParameters ? inputParameters.slice() : [];\r\n        if (e.target.value) {\r\n            updatedInputParameters[parameterOrder] = e.target.value;\r\n        } \r\n        else {\r\n            updatedInputParameters.splice(parameterOrder);\r\n        }\r\n\r\n        setInputParameters(updatedInputParameters);\r\n    }\r\n\r\n    let runSimulation = () => {\r\n        const result = generateResults(selectedMode.allocationFunction(leadData, courseAdvisors, inputParameters));\r\n\r\n        setLeadData(result.leads);\r\n        setCourseAdvisors(result.courseAdvisors);\r\n        setAggregatedResults(result.aggregatedResults);\r\n    }\r\n\r\n    let generateResults = (result) =>  {\r\n        let updatedCourseAdvisors = result.courseAdvisors.slice();\r\n        for (let leadNum = 0; leadNum < result.leads.length; leadNum++) {\r\n            let lead = result.leads[leadNum];\r\n            let allocatedCa = updatedCourseAdvisors[lead.allocatedCa];\r\n            let selectedPropensity = lead.courseAdvisors[allocatedCa.id].propensity;\r\n            allocatedCa.cumulativePropensity = allocatedCa.cumulativePropensity + selectedPropensity;\r\n            allocatedCa.cumulativeInherent = allocatedCa.cumulativeInherent + lead.inherent;\r\n        }\r\n\r\n        let aggregatedResults = {\r\n            totalLeads: 0,\r\n            cumulativePropensity: 0,\r\n            cumulativeInherent: 0,\r\n            averagePropensity: 0,\r\n            averageVarianceToInherent: 0,\r\n            predictedConversions: 0,\r\n        }\r\n        for (let caNum = 0; caNum < updatedCourseAdvisors.length; caNum++) {\r\n            let advisor = updatedCourseAdvisors[caNum];\r\n            advisor.averagePropensity = advisor.currentAllotment ? advisor.cumulativePropensity / advisor.currentAllotment : 0;\r\n            advisor.varianceToInherent = advisor.cumulativePropensity - advisor.cumulativeInherent;\r\n            advisor.predictedConversions = advisor.currentAllotment * advisor.averagePropensity;\r\n\r\n            aggregatedResults.totalLeads += advisor.currentAllotment;\r\n            aggregatedResults.cumulativePropensity += advisor.cumulativePropensity;\r\n            aggregatedResults.cumulativeInherent += advisor.cumulativeInherent;\r\n            aggregatedResults.predictedConversions += advisor.predictedConversions;\r\n        }\r\n        aggregatedResults.averagePropensity = aggregatedResults.cumulativePropensity / aggregatedResults.totalLeads;\r\n        aggregatedResults.averageVarianceToInherent = (aggregatedResults.cumulativePropensity - aggregatedResults.cumulativeInherent) / updatedCourseAdvisors.length;\r\n\r\n        let updatedResult = {...result};\r\n        updatedResult.courseAdvisors = updatedCourseAdvisors;\r\n        updatedResult.aggregatedResults = aggregatedResults;\r\n\r\n        return updatedResult;\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <h3>CA File</h3>\r\n                <LocalFileReader\r\n                // CA Data\r\n                    onFileLoad={(e) => handleCaDataLoad(e)}\r\n                    onFileRemove={() => handleFileRemove()}\r\n                />\r\n                <h3>Lead File</h3>\r\n                <LocalFileReader\r\n                // Lead Data\r\n                    onFileLoad={(e) => handleLeadDataLoad(e)}\r\n                    onFileRemove={() => handleFileRemove()}\r\n                    disabled={!(courseAdvisors && courseAdvisors.length > 0)}\r\n                />\r\n                <ConfigPanel\r\n                    selectedMode={selectedMode}\r\n                    onModeChange={(e) => handleModeChange(e)}\r\n                    onParameterChange={(e, parameter) => handleParameterChange(e, parameter)}\r\n                />\r\n                <button\r\n                    onClick={() => runSimulation()}\r\n                    disabled={!leadData || !selectedMode || \r\n                        (selectedMode.parameters && (!inputParameters || inputParameters.length < Object.keys(selectedMode.parameters).length))}\r\n                >\r\n                    Run Simulation\r\n                </button>\r\n                <ResultsPanel\r\n                    courseAdvisors={courseAdvisors}\r\n                    aggregatedResults={aggregatedResults}\r\n                />\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default LeadAllocationHome;\r\n\r\n\r\n\r\n/*\r\nAllocation Mode: manual, round robin, linear weighted, polynomial weighted, optimised round robin (leeway of n)\r\nInput data (csv load)\r\nRandomise order\r\nAuto-allocate\r\n\r\nSummaries: overall result score (raw conversions, variance to inherent)\r\n\r\nIndividual leads (allocated CA [freeze], inherent, per CA propensity)\r\n\r\n*/","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport LeadAllocationHome from './LeadAllocationHome';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <LeadAllocationHome />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}