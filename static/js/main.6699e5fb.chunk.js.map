{"version":3,"sources":["LocalFileReader.js","AllocationUtils.js","ConfigPanel.js","Table.js","ResultsPanel.js","LeadAllocationHome.js","reportWebVitals.js","index.js"],"names":["LocalFileReader","props","handleOpenDialog","e","state","buttonRef","current","open","handleOnFileLoad","data","onFileLoad","handleOnError","err","file","inputElem","reason","console","log","handleOnRemoveFile","onFileRemove","handleRemoveFile","removeFile","React","createRef","ref","this","onError","noClick","noDrag","config","header","dynamicTyping","skipEmptyLines","onRemoveFile","style","display","flexDirection","marginBottom","type","onClick","disabled","borderRadius","marginLeft","marginRight","width","paddingLeft","paddingRight","borderWidth","borderStyle","borderColor","height","lineHeight","marginTop","paddingTop","name","Component","PORTFOLIOS","TIMEZONES","Adelaide","startHour","endHour","Canada","ALLOCATION_MODES","id","description","allocationFunction","leads","courseAdvisors","updatedLeads","slice","updatedCourseAdvisors","map","advisor","newAdvisor","lastAllocatedId","domesticAdvisors","filter","portfolio","canadaAdvisors","leadIndex","lead","sortedAdvisors","sort","a","b","filteredAdvisors","isInWorkingHours","created","location","selectedAdvisor","length","leadId","allocatedCa","currentAllotment","i","highestPropensity","mostSuitableCa","isAllocatedInWorkingHours","caNum","advisorPropensity","propensity","isMatchingPortfolio","advisorIsInWorkingHours","useNewAdvisor","datetime","timezone","hourOfDay","hour","minute","effectiveEndHour","effectiveHourOfDay","ConfigPanel","allocationModeElements","value","hidden","concat","mode","onChange","onModeChange","target","selectedMode","Table","columns","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","ResultsPanel","CA_RESULTS_TABLE_COLUMNS","useMemo","Header","accessor","averagePropensity","toFixed","varianceToInherent","predictedConversions","OVERALL_RESULTS_TABLE_COLUMNS","averageVarianceToInherent","aggregatedResults","LeadAllocationHome","useState","leadData","setLeadData","setCourseAdvisors","setSelectedMode","setAggregatedResults","NON_CA_FIELDS","handleFileRemove","runSimulation","result","leadNum","selectedPropensity","cumulativePropensity","cumulativeInherent","inherent","totalLeads","updatedResult","generateResults","className","newCourseAdvisors","rowNum","newCa","caName","handleCaDataLoad","newLead","moment","fieldNum","some","v","meta","fields","push","handleLeadDataLoad","handleModeChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6699e5fb.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport { CSVReader } from 'react-papaparse'\r\n\r\n\r\n\r\nexport default class LocalFileReader extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            buttonRef: React.createRef()\r\n        }\r\n    }    \r\n    \r\n  handleOpenDialog = (e) => {\r\n    // Note that the ref is set async, so it might be null at some point\r\n    if (this.state.buttonRef.current) {\r\n      this.state.buttonRef.current.open(e)\r\n    }\r\n  }\r\n\r\n  handleOnFileLoad = (data) => {\r\n    return this.props.onFileLoad(data);\r\n  }\r\n\r\n  handleOnError = (err, file, inputElem, reason) => {\r\n    console.log(err)\r\n  }\r\n\r\n  handleOnRemoveFile = (data) => {\r\n    return this.props.onFileRemove();\r\n  }\r\n\r\n  handleRemoveFile = (e) => {\r\n    // Note that the ref is set async, so it might be null at some point\r\n    if (this.state.buttonRef.current) {\r\n        this.state.buttonRef.current.removeFile(e)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <CSVReader\r\n        ref={this.state.buttonRef ? this.state.buttonRef : null}\r\n        onFileLoad={this.handleOnFileLoad}\r\n        onError={this.handleOnError}\r\n        noClick\r\n        noDrag\r\n        config={\r\n            {\r\n                header: true,\r\n                dynamicTyping: true,\r\n                skipEmptyLines: true,\r\n            }\r\n        }\r\n        onRemoveFile={this.handleOnRemoveFile}\r\n      >\r\n        {({ file }) => (\r\n          <aside\r\n            style={{\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n              marginBottom: 10\r\n            }}\r\n          >\r\n            <button\r\n              type='button'\r\n              onClick={this.handleOpenDialog}\r\n              disabled={this.props.disabled}\r\n              style={{\r\n                borderRadius: 0,\r\n                marginLeft: 0,\r\n                marginRight: 0,\r\n                width: '40%',\r\n                paddingLeft: 0,\r\n                paddingRight: 0\r\n              }}\r\n            >\r\n              Browse file\r\n            </button>\r\n            <div\r\n              style={{\r\n                borderWidth: 1,\r\n                borderStyle: 'solid',\r\n                borderColor: '#ccc',\r\n                height: 45,\r\n                lineHeight: 2.5,\r\n                marginTop: 5,\r\n                marginBottom: 5,\r\n                paddingLeft: 13,\r\n                paddingTop: 3,\r\n                width: '60%'\r\n              }}\r\n            >\r\n              {file && file.name}\r\n            </div>\r\n            <button\r\n              style={{\r\n                borderRadius: 0,\r\n                marginLeft: 0,\r\n                marginRight: 0,\r\n                paddingLeft: 20,\r\n                paddingRight: 20\r\n              }}\r\n              onClick={this.handleRemoveFile}\r\n            >\r\n              Remove\r\n            </button>\r\n          </aside>\r\n        )}\r\n      </CSVReader>\r\n    )\r\n  }\r\n}","\r\nconst PORTFOLIOS = {\r\n    Domestic: \"Domestic\",\r\n    Canada: \"Canada\",\r\n}\r\n\r\nconst TIMEZONES = {\r\n    Adelaide: {\r\n        startHour: 9,\r\n        endHour: 17,\r\n    },\r\n    Canada: {\r\n        startHour: 22.5,\r\n        endHour: 6.5,\r\n    }\r\n}\r\n\r\n\r\nlet allocateRoundRobin = (leads, courseAdvisors) => {\r\n    let updatedLeads = leads.slice();\r\n    let updatedCourseAdvisors = courseAdvisors.map((advisor) => {\r\n        let newAdvisor = {...advisor};\r\n        newAdvisor.lastAllocatedId = -1;\r\n        return newAdvisor;\r\n    });\r\n\r\n    let domesticAdvisors = updatedCourseAdvisors.filter((advisor) => (\r\n        (advisor.portfolio === PORTFOLIOS.Domestic)\r\n    ));\r\n    let canadaAdvisors = updatedCourseAdvisors.filter((advisor) => (\r\n        (advisor.portfolio === PORTFOLIOS.Canada)\r\n    ));\r\n\r\n    for (let leadIndex = 0; leadIndex < leads.length; leadIndex++) {\r\n        let lead = updatedLeads[leadIndex];\r\n        let sortedAdvisors;\r\n        if (lead.portfolio === PORTFOLIOS.Domestic) {\r\n            sortedAdvisors = domesticAdvisors.sort((a,b) => a.lastAllocatedId - b.lastAllocatedId);\r\n        }\r\n        else if (lead.portfolio === PORTFOLIOS.Canada) {\r\n            sortedAdvisors = canadaAdvisors.sort((a,b) => a.lastAllocatedId - b.lastAllocatedId);\r\n        }\r\n\r\n        let filteredAdvisors = sortedAdvisors.filter((advisor) => isInWorkingHours(lead.created, advisor.location));\r\n        let selectedAdvisor = filteredAdvisors.length > 0 ? filteredAdvisors[0] : sortedAdvisors[0];\r\n\r\n        selectedAdvisor.lastAllocatedId = lead.leadId;\r\n        lead.allocatedCa = selectedAdvisor.id;\r\n        updatedCourseAdvisors[selectedAdvisor.id].currentAllotment++;\r\n    }\r\n\r\n    const returnObj = {\r\n        leads: updatedLeads,\r\n        courseAdvisors: updatedCourseAdvisors,\r\n    }\r\n    return returnObj;\r\n}\r\n\r\n\r\nlet allocateMostSuitableAggressive = (leads, courseAdvisors) => {\r\n    let updatedLeads = leads.slice();\r\n    let updatedCourseAdvisors = courseAdvisors.slice();\r\n\r\n    for (let i = 0; i < leads.length; i++) {\r\n        let lead = updatedLeads[i];\r\n        let highestPropensity = -1;\r\n        let mostSuitableCa;\r\n        let isAllocatedInWorkingHours = false;\r\n        for (let caNum = 0; caNum < updatedCourseAdvisors.length; caNum++) {\r\n            let advisor = updatedCourseAdvisors[caNum];\r\n            let advisorPropensity = lead.courseAdvisors[caNum].propensity;\r\n            //Hard pass if the portfolio doesn't match\r\n            if (!isMatchingPortfolio(advisor, lead)) {\r\n                continue;\r\n            }\r\n            let advisorIsInWorkingHours = isInWorkingHours(lead.created, advisor.location);\r\n            let useNewAdvisor = !mostSuitableCa || (advisorIsInWorkingHours && !isAllocatedInWorkingHours); //always assign if there's no current allocation or the allocated CA is not available\r\n            if (!useNewAdvisor && !(isAllocatedInWorkingHours && !advisorIsInWorkingHours)) { //ignore the CA if they're not in the right timezone and the existing selection is\r\n                //use the new CA if they're more suitable\r\n                useNewAdvisor = advisorPropensity > highestPropensity || (advisorPropensity === highestPropensity && mostSuitableCa.currentAllotment > advisor.currentAllotment);\r\n            }\r\n\r\n            if (useNewAdvisor) {\r\n                mostSuitableCa = advisor;\r\n                isAllocatedInWorkingHours = advisorIsInWorkingHours;\r\n                highestPropensity = advisorPropensity;\r\n            }\r\n        }\r\n        if (!mostSuitableCa) {\r\n            console.log(\"No allocation?\");\r\n        }\r\n        lead.allocatedCa = mostSuitableCa.id;\r\n        updatedCourseAdvisors[mostSuitableCa.id].currentAllotment++;\r\n    }\r\n    \r\n    const returnObj = {\r\n        leads: updatedLeads,\r\n        courseAdvisors: updatedCourseAdvisors,\r\n    }\r\n    return returnObj;\r\n}\r\n\r\n\r\nexport const ALLOCATION_MODES = [\r\n    {\r\n        id: 0,\r\n        name: \"Round Robin\",\r\n        description: \"Allocates leads one by one to each available CA\",\r\n        allocationFunction: allocateRoundRobin,\r\n    },\r\n    {\r\n        id: 1,\r\n        name: \"Most Suitable (Aggressive)\",\r\n        description: \"Allocates leads always to the CA with the highest likelihood of conversion. Lowest current allotment is used only as a tiebreaker\",\r\n        allocationFunction: allocateMostSuitableAggressive,\r\n    }\r\n]\r\n\r\n\r\nfunction isMatchingPortfolio(advisor, lead) {\r\n    return advisor.portfolio === lead.portfolio;\r\n}\r\n\r\nfunction isInWorkingHours(datetime, location) {\r\n    let timezone = TIMEZONES[location];\r\n    let hourOfDay = datetime.hour() + datetime.minute() / 60;\r\n    \r\n    let effectiveEndHour = timezone.endHour;\r\n    let effectiveHourOfDay = hourOfDay;\r\n    if (timezone.endHour <= timezone.startHour) {\r\n        effectiveEndHour = timezone.endHour + 24;\r\n        if (hourOfDay < timezone.startHour) {\r\n            effectiveHourOfDay += 24;\r\n        }\r\n    }\r\n\r\n    return effectiveHourOfDay >= timezone.startHour && effectiveHourOfDay <= effectiveEndHour;\r\n}","import { ALLOCATION_MODES } from './AllocationUtils';\r\n\r\nfunction ConfigPanel(props) {\r\n\r\n    let allocationModeElements = [<option key=\"unselected\" value={null} hidden/>]\r\n    allocationModeElements = allocationModeElements.concat(ALLOCATION_MODES.map((mode) => \r\n        <option key={mode.name} value={mode.id}>\r\n            {mode.name}\r\n        </option>));\r\n\r\n    return (\r\n        <div>\r\n            <select\r\n                onChange={(e) => props.onModeChange(e.target.value)}\r\n            >\r\n                {allocationModeElements}\r\n            </select>\r\n            <div>\r\n                {props.selectedMode ? props.selectedMode.description : \"\"}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConfigPanel;","import React from 'react';\r\nimport { useTable } from 'react-table';\r\n\r\nexport function Table({ columns, data }) {\r\n    // Use the state and functions returned from useTable to build your UI\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    });\r\n\r\n    // Render the UI for your table\r\n    return (\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n","import { Table } from './Table';\r\nimport React from 'react';\r\n\r\n\r\nfunction ResultsPanel(props) {\r\n\r\n    const CA_RESULTS_TABLE_COLUMNS = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'CA',\r\n                accessor: 'caName',\r\n            },\r\n            {\r\n                Header: 'Portfolio',\r\n                accessor: 'portfolio'\r\n            },\r\n            {\r\n                Header: 'Location',\r\n                accessor: 'location'\r\n            },\r\n            {\r\n                Header: 'Allotment',\r\n                accessor: 'currentAllotment',\r\n            },\r\n            {\r\n                Header: 'Average Propensity',\r\n                accessor: (row) => row ? row.averagePropensity.toFixed(2) : 0,\r\n            },\r\n            {\r\n                Header: 'Variance to Inherent',\r\n                accessor: (row) => row ? row.varianceToInherent.toFixed(2) : 0,\r\n            },\r\n            {\r\n                Header: 'Predicted Conversions',\r\n                accessor: (row) => row ? row.predictedConversions.toFixed(2) : 0,\r\n            },\r\n        ],\r\n        []\r\n    )\r\n    \r\n    const OVERALL_RESULTS_TABLE_COLUMNS = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'Total Leads',\r\n                accessor: 'totalLeads',\r\n            },\r\n            {\r\n                Header: 'Average Propensity',\r\n                accessor: (row) => row ? row.averagePropensity.toFixed(2) : 0,\r\n            },\r\n            {\r\n                Header: 'Average Variance to Inherent',\r\n                accessor: (row) => row ? row.averageVarianceToInherent.toFixed(2) : 0,\r\n            },\r\n            {\r\n                Header: 'Predicted Conversions',\r\n                accessor: (row) => row ? row.predictedConversions.toFixed(2) : 0,\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Table columns={OVERALL_RESULTS_TABLE_COLUMNS} data={props.aggregatedResults ? [props.aggregatedResults] : []}/>\r\n            <Table columns={CA_RESULTS_TABLE_COLUMNS} data={props.courseAdvisors ? props.courseAdvisors : []}/>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ResultsPanel;","import LocalFileReader from './LocalFileReader';\r\nimport ConfigPanel from './ConfigPanel';\r\nimport React, {useState} from 'react';\r\nimport moment from 'moment';\r\n\r\nimport {ALLOCATION_MODES} from './AllocationUtils';\r\nimport ResultsPanel from './ResultsPanel';\r\n\r\nfunction LeadAllocationHome() {\r\n    const [leadData, setLeadData] = useState();\r\n    const [courseAdvisors, setCourseAdvisors] = useState();\r\n    const [selectedMode, setSelectedMode] = useState();\r\n    const [aggregatedResults, setAggregatedResults] = useState();\r\n\r\n\r\n\r\n    const NON_CA_FIELDS = [\"leadId\", \"created\", \"inherent\", \"portfolio\"];\r\n    let handleLeadDataLoad = (e) => {\r\n        let leads = [];\r\n        for (let rowNum = 0; rowNum < e.length; rowNum++) {\r\n            let row = e[rowNum].data;\r\n            let newLead = {\r\n                leadId: row.leadId,\r\n                created: moment(row.created, \"DD/MM/YYYY hh:mm\"),\r\n                inherent: row.inherent,\r\n                portfolio: row.portfolio,\r\n            };\r\n\r\n            newLead.courseAdvisors = [];\r\n            let caNum = 0;\r\n            for (let fieldNum = 0; fieldNum < e[rowNum].meta.fields.length; fieldNum++) {\r\n                if (NON_CA_FIELDS.some(v => v === e[rowNum].meta.fields[fieldNum])) {\r\n                    continue;\r\n                }\r\n                let newCa = {\r\n                    id: caNum++,\r\n                    caName: e[rowNum].meta.fields[fieldNum],\r\n                    propensity: row[e[rowNum].meta.fields[fieldNum]],\r\n                }\r\n                newLead.courseAdvisors.push(newCa);\r\n            }\r\n            leads[rowNum] = newLead;\r\n        }\r\n        setLeadData(leads);\r\n    }\r\n\r\n    let handleCaDataLoad = (e) => {\r\n        let newCourseAdvisors = [];\r\n\r\n        for (let rowNum = 0; rowNum < e.length; rowNum++) {\r\n            let row = e[rowNum].data;\r\n            let newCa = {\r\n                id: row.id,\r\n                caName: row.name,\r\n                portfolio: row.portfolio,\r\n                location: row.location,\r\n                currentAllotment: 0,\r\n                cumulativePropensity: 0,\r\n                cumulativeInherent: 0,\r\n                averagePropensity: 0,\r\n                varianceToInherent: 0,\r\n                predictedConversions: 0,\r\n            }\r\n            newCourseAdvisors[rowNum] = newCa;\r\n        }\r\n\r\n        setCourseAdvisors(newCourseAdvisors);\r\n    }    \r\n\r\n    let handleFileRemove = () => {\r\n        setLeadData();\r\n        setCourseAdvisors();\r\n        setAggregatedResults();\r\n    }\r\n\r\n    let handleModeChange = (selectedMode) => {\r\n        setSelectedMode(ALLOCATION_MODES[selectedMode]);\r\n    }\r\n\r\n    let generateResults = (result) =>  {\r\n        let updatedCourseAdvisors = result.courseAdvisors.slice();\r\n        for (let leadNum = 0; leadNum < result.leads.length; leadNum++) {\r\n            let lead = result.leads[leadNum];\r\n            let allocatedCa = updatedCourseAdvisors[lead.allocatedCa];\r\n            let selectedPropensity = lead.courseAdvisors[allocatedCa.id].propensity;\r\n            allocatedCa.cumulativePropensity = allocatedCa.cumulativePropensity + selectedPropensity;\r\n            allocatedCa.cumulativeInherent = allocatedCa.cumulativeInherent + lead.inherent;\r\n        }\r\n\r\n        let aggregatedResults = {\r\n            totalLeads: 0,\r\n            cumulativePropensity: 0,\r\n            cumulativeInherent: 0,\r\n            averagePropensity: 0,\r\n            averageVarianceToInherent: 0,\r\n            predictedConversions: 0,\r\n        }\r\n        for (let caNum = 0; caNum < updatedCourseAdvisors.length; caNum++) {\r\n            let advisor = updatedCourseAdvisors[caNum];\r\n            advisor.averagePropensity = advisor.currentAllotment ? advisor.cumulativePropensity / advisor.currentAllotment : 0;\r\n            advisor.varianceToInherent = advisor.cumulativePropensity - advisor.cumulativeInherent;\r\n            advisor.predictedConversions = advisor.currentAllotment * advisor.averagePropensity;\r\n\r\n            aggregatedResults.totalLeads += advisor.currentAllotment;\r\n            aggregatedResults.cumulativePropensity += advisor.cumulativePropensity;\r\n            aggregatedResults.cumulativeInherent += advisor.cumulativeInherent;\r\n            aggregatedResults.predictedConversions += advisor.predictedConversions;\r\n        }\r\n        aggregatedResults.averagePropensity = aggregatedResults.cumulativePropensity / aggregatedResults.totalLeads;\r\n        aggregatedResults.averageVarianceToInherent = (aggregatedResults.cumulativePropensity - aggregatedResults.cumulativeInherent) / updatedCourseAdvisors.length;\r\n\r\n        let updatedResult = {...result};\r\n        updatedResult.courseAdvisors = updatedCourseAdvisors;\r\n        updatedResult.aggregatedResults = aggregatedResults;\r\n\r\n        return updatedResult;\r\n    }\r\n\r\n    let runSimulation = () => {\r\n        const result = generateResults(selectedMode.allocationFunction(leadData, courseAdvisors));\r\n\r\n        setLeadData(result.leads);\r\n        setCourseAdvisors(result.courseAdvisors);\r\n        setAggregatedResults(result.aggregatedResults);\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <p>\r\n                    CA File\r\n                </p>\r\n                <LocalFileReader\r\n                // CA Data\r\n                    onFileLoad={(e) => handleCaDataLoad(e)}\r\n                    onFileRemove={() => handleFileRemove()}\r\n                />\r\n                <p>\r\n                    Lead File\r\n                </p>\r\n                <LocalFileReader\r\n                // Lead Data\r\n                    onFileLoad={(e) => handleLeadDataLoad(e)}\r\n                    onFileRemove={() => handleFileRemove()}\r\n                    disabled={!(courseAdvisors && courseAdvisors.length > 0)}\r\n                />\r\n                <ConfigPanel\r\n                    selectedMode={selectedMode}\r\n                    onModeChange={(e) => handleModeChange(e)}\r\n                />\r\n                <button\r\n                    onClick={() => runSimulation()}\r\n                    disabled={!leadData || !selectedMode}\r\n                >\r\n                    Run Simulation\r\n                </button>\r\n                <ResultsPanel\r\n                    courseAdvisors={courseAdvisors}\r\n                    aggregatedResults={aggregatedResults}\r\n                />\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default LeadAllocationHome;\r\n\r\n\r\n\r\n/*\r\nAllocation Mode: manual, round robin, linear weighted, polynomial weighted, optimised round robin (leeway of n)\r\nInput data (csv load)\r\nRandomise order\r\nAuto-allocate\r\n\r\nSummaries: overall result score (raw conversions, variance to inherent)\r\n\r\nIndividual leads (allocated CA [freeze], inherent, per CA propensity)\r\n\r\n*/\r\n\r\n\r\n\r\n/*\r\n\r\n[\r\n    {\r\n        leadID: 1,\r\n        createTime: 2021-1-1 11:03,\r\n        inherent: 0.18\r\n    }\r\n\r\n]\r\n\r\n\r\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport LeadAllocationHome from './LeadAllocationHome';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <LeadAllocationHome />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}