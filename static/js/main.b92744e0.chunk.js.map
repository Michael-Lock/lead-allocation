{"version":3,"sources":["LocalFileReader.js","AllocationUtils.js","ConfigPanel.js","Table.js","LeadAllocationHome.js","reportWebVitals.js","index.js"],"names":["buttonRef","React","createRef","LocalFileReader","handleOpenDialog","e","current","open","handleOnFileLoad","data","props","onFileLoad","handleOnError","err","file","inputElem","reason","console","log","handleOnRemoveFile","OnFileRemove","handleRemoveFile","removeFile","ref","this","onError","noClick","noDrag","config","header","dynamicTyping","skipEmptyLines","onRemoveFile","style","display","flexDirection","marginBottom","type","onClick","borderRadius","marginLeft","marginRight","width","paddingLeft","paddingRight","borderWidth","borderStyle","borderColor","height","lineHeight","marginTop","paddingTop","name","Component","ALLOCATION_MODES","id","description","allocationFunction","leads","courseAdvisors","updatedLeads","slice","updatedCourseAdvisors","lastCa","i","length","allocatedCa","currentAllotment","highestPropensity","mostSuitableCa","caNum","advisor","propensity","ConfigPanel","allocationModeElements","value","hidden","concat","map","mode","onChange","onModeChange","target","selectedMode","Table","columns","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","LeadAllocationHome","useState","leadData","setLeadData","setCourseAdvisors","setSelectedMode","resultsTableColumns","useMemo","Header","accessor","averagePropensity","toFixed","varianceToInherent","predictedConversions","NON_CA_FIELDS","runSimulation","result","leadNum","lead","selectedPropensity","cumulativePropensity","cumulativeInherent","inherent","updatedResult","generateResults","className","rowNum","newLead","leadId","created","portfolio","fieldNum","some","v","meta","fields","newCa","caName","push","newCourseAdvisors","leadCourseAdvisors","handleDataLoad","onFileRemove","handleModeChange","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b92744e0.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nimport { CSVReader } from 'react-papaparse'\r\n\r\nconst buttonRef = React.createRef()\r\n\r\nexport default class LocalFileReader extends Component {\r\n  handleOpenDialog = (e) => {\r\n    // Note that the ref is set async, so it might be null at some point\r\n    if (buttonRef.current) {\r\n      buttonRef.current.open(e)\r\n    }\r\n  }\r\n\r\n  handleOnFileLoad = (data) => {\r\n    return this.props.onFileLoad(data);\r\n  }\r\n\r\n  handleOnError = (err, file, inputElem, reason) => {\r\n    console.log(err)\r\n  }\r\n\r\n  handleOnRemoveFile = (data) => {\r\n    return this.props.OnFileRemove();\r\n  }\r\n\r\n  handleRemoveFile = (e) => {\r\n    // Note that the ref is set async, so it might be null at some point\r\n    if (buttonRef.current) {\r\n      buttonRef.current.removeFile(e)\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <CSVReader\r\n        ref={buttonRef}\r\n        onFileLoad={this.handleOnFileLoad}\r\n        onError={this.handleOnError}\r\n        noClick\r\n        noDrag\r\n        config={\r\n            {\r\n                header: true,\r\n                dynamicTyping: true,\r\n                skipEmptyLines: true,\r\n            }\r\n        }\r\n        onRemoveFile={this.handleOnRemoveFile}\r\n      >\r\n        {({ file }) => (\r\n          <aside\r\n            style={{\r\n              display: 'flex',\r\n              flexDirection: 'row',\r\n              marginBottom: 10\r\n            }}\r\n          >\r\n            <button\r\n              type='button'\r\n              onClick={this.handleOpenDialog}\r\n              style={{\r\n                borderRadius: 0,\r\n                marginLeft: 0,\r\n                marginRight: 0,\r\n                width: '40%',\r\n                paddingLeft: 0,\r\n                paddingRight: 0\r\n              }}\r\n            >\r\n              Browse file\r\n            </button>\r\n            <div\r\n              style={{\r\n                borderWidth: 1,\r\n                borderStyle: 'solid',\r\n                borderColor: '#ccc',\r\n                height: 45,\r\n                lineHeight: 2.5,\r\n                marginTop: 5,\r\n                marginBottom: 5,\r\n                paddingLeft: 13,\r\n                paddingTop: 3,\r\n                width: '60%'\r\n              }}\r\n            >\r\n              {file && file.name}\r\n            </div>\r\n            <button\r\n              style={{\r\n                borderRadius: 0,\r\n                marginLeft: 0,\r\n                marginRight: 0,\r\n                paddingLeft: 20,\r\n                paddingRight: 20\r\n              }}\r\n              onClick={this.handleRemoveFile}\r\n            >\r\n              Remove\r\n            </button>\r\n          </aside>\r\n        )}\r\n      </CSVReader>\r\n    )\r\n  }\r\n}","\r\n\r\nlet allocateRoundRobin = (leads, courseAdvisors) => {\r\n    let updatedLeads = leads.slice();\r\n    let updatedCourseAdvisors = courseAdvisors.slice();\r\n\r\n    let lastCa = 0;\r\n\r\n    for (let i = 0; i < leads.length; i++) {\r\n        updatedLeads[i].allocatedCa = updatedCourseAdvisors[lastCa].id;\r\n        updatedCourseAdvisors[lastCa].currentAllotment++;\r\n        lastCa = (lastCa + 1) % courseAdvisors.length;\r\n    }\r\n\r\n    const returnObj = {\r\n        leads: updatedLeads,\r\n        courseAdvisors: updatedCourseAdvisors,\r\n    }\r\n    return returnObj;\r\n}\r\n\r\n\r\nlet allocateMostSuitableAggressive = (leads, courseAdvisors) => {\r\n    let updatedLeads = leads.slice();\r\n    let updatedCourseAdvisors = courseAdvisors.slice();\r\n\r\n    for (let i = 0; i < leads.length; i++) {\r\n        let highestPropensity = -1;\r\n        let mostSuitableCa;\r\n        for (let caNum = 0; caNum < leads[i].courseAdvisors.length; caNum++) {\r\n            let advisor = leads[i].courseAdvisors[caNum];\r\n            if (!mostSuitableCa || advisor.propensity > highestPropensity || (advisor.propensity === highestPropensity && mostSuitableCa.currentAllotment > advisor.currentAllotment)) {\r\n                mostSuitableCa = advisor;\r\n                highestPropensity = advisor.propensity;\r\n            }\r\n        }\r\n        updatedLeads[i].allocatedCa = mostSuitableCa.id;\r\n        updatedCourseAdvisors[mostSuitableCa.id].currentAllotment++;\r\n    }\r\n    \r\n    const returnObj = {\r\n        leads: updatedLeads,\r\n        courseAdvisors: updatedCourseAdvisors,\r\n    }\r\n    return returnObj;\r\n}\r\n\r\n\r\nexport const ALLOCATION_MODES = [\r\n    {\r\n        id: 0,\r\n        name: \"Round Robin\",\r\n        description: \"Allocates leads one by one to each available CA\",\r\n        allocationFunction: allocateRoundRobin,\r\n    },\r\n    {\r\n        id: 1,\r\n        name: \"Most Suitable (Aggressive)\",\r\n        description: \"Allocates leads always to the CA with the highest likelihood of conversion. Lowest current allotment is used only as a tiebreaker\",\r\n        allocationFunction: allocateMostSuitableAggressive,\r\n    }\r\n]","import { ALLOCATION_MODES } from './AllocationUtils';\r\n\r\nfunction ConfigPanel(props) {\r\n\r\n    let allocationModeElements = [<option key=\"unselected\" value={null} hidden/>]\r\n    allocationModeElements = allocationModeElements.concat(ALLOCATION_MODES.map((mode) => \r\n        <option key={mode.name} value={mode.id}>\r\n            {mode.name}\r\n        </option>));\r\n\r\n    return (\r\n        <div>\r\n            <select\r\n                onChange={(e) => props.onModeChange(e.target.value)}\r\n            >\r\n                {allocationModeElements}\r\n            </select>\r\n            <div>\r\n                {props.selectedMode ? props.selectedMode.description : \"\"}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConfigPanel;","import React from 'react';\r\nimport { useTable } from 'react-table';\r\n\r\nexport function Table({ columns, data }) {\r\n    // Use the state and functions returned from useTable to build your UI\r\n    const {\r\n        getTableProps,\r\n        getTableBodyProps,\r\n        headerGroups,\r\n        rows,\r\n        prepareRow,\r\n    } = useTable({\r\n        columns,\r\n        data,\r\n    });\r\n\r\n    // Render the UI for your table\r\n    return (\r\n        <table {...getTableProps()}>\r\n            <thead>\r\n                {headerGroups.map(headerGroup => (\r\n                    <tr {...headerGroup.getHeaderGroupProps()}>\r\n                        {headerGroup.headers.map(column => (\r\n                            <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                        ))}\r\n                    </tr>\r\n                ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n                {rows.map((row, i) => {\r\n                    prepareRow(row);\r\n                    return (\r\n                        <tr {...row.getRowProps()}>\r\n                            {row.cells.map(cell => {\r\n                                return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\r\n                            })}\r\n                        </tr>\r\n                    );\r\n                })}\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n","import LocalFileReader from './LocalFileReader';\r\nimport ConfigPanel from './ConfigPanel';\r\nimport React, {useState} from 'react';\r\n\r\nimport {ALLOCATION_MODES} from './AllocationUtils';\r\nimport { Table } from './Table';\r\n\r\nfunction LeadAllocationHome() {\r\n    const [leadData, setLeadData] = useState();\r\n    const [courseAdvisors, setCourseAdvisors] = useState();\r\n    const [selectedMode, setSelectedMode] = useState();\r\n\r\n    const resultsTableColumns = React.useMemo(\r\n        () => [\r\n            {\r\n                Header: 'CA',\r\n                accessor: 'caName',\r\n            },\r\n            {\r\n                Header: 'Allotment',\r\n                accessor: 'currentAllotment',\r\n            },\r\n            {\r\n                Header: 'Average Propensity',\r\n                accessor: (row) => row ? row.averagePropensity.toFixed(2) : 0,\r\n            },\r\n            {\r\n                Header: 'Variance to Inherent',\r\n                accessor: (row) => row ? row.varianceToInherent.toFixed(2) : 0,\r\n            },\r\n            {\r\n                Header: 'Predicted Conversions',\r\n                accessor: (row) => row ? row.predictedConversions.toFixed(2) : 0,\r\n            },\r\n        ],\r\n        []\r\n    )\r\n\r\n    const NON_CA_FIELDS = [\"leadId\", \"created\", \"inherent\", \"portfolio\"];\r\n    let handleDataLoad = (e) => {\r\n        let leads = [];\r\n        for (let rowNum = 0; rowNum < e.length; rowNum++) {\r\n            let row = e[rowNum].data;\r\n            let newLead = {\r\n                leadId: row.leadId,\r\n                created: row.created,\r\n                inherent: row.inherent,\r\n                portfolio: row.portfolio,\r\n            };\r\n            newLead.courseAdvisors = [];\r\n            let caNum = 0;\r\n            for (let fieldNum = 0; fieldNum < e[rowNum].meta.fields.length; fieldNum++) {\r\n                if (NON_CA_FIELDS.some(v => v === e[rowNum].meta.fields[fieldNum])) {\r\n                    continue;\r\n                }\r\n                let newCa = {\r\n                    id: caNum++,\r\n                    caName: e[rowNum].meta.fields[fieldNum],\r\n                    propensity: row[e[rowNum].meta.fields[fieldNum]],\r\n                }\r\n                newLead.courseAdvisors.push(newCa);\r\n            }\r\n            leads[rowNum] = newLead;\r\n        }\r\n        setLeadData(leads);\r\n\r\n        let newCourseAdvisors = [];\r\n        if (leads.length > 0) {\r\n            let leadCourseAdvisors = leads[0].courseAdvisors;\r\n            for (let i = 0; i < leadCourseAdvisors.length; i++) {\r\n                newCourseAdvisors[i] = {\r\n                    id: i,\r\n                    caName: leadCourseAdvisors[i].caName,\r\n                    currentAllotment: 0,\r\n                    cumulativePropensity: 0,\r\n                    cumulativeInherent: 0,\r\n                    averagePropensity: 0,\r\n                    varianceToInherent: 0,\r\n                    predictedConversions: 0,\r\n                }\r\n            }\r\n        }\r\n        setCourseAdvisors(newCourseAdvisors);\r\n    }\r\n\r\n    let handleFileRemove = () => {\r\n        setLeadData(null);\r\n        setCourseAdvisors(null);\r\n    }\r\n\r\n    let handleModeChange = (selectedMode) => {\r\n        setSelectedMode(ALLOCATION_MODES[selectedMode]);\r\n    }\r\n\r\n    let generateResults = (result) =>  {\r\n        let updatedCourseAdvisors = result.courseAdvisors.slice();\r\n        for (let leadNum = 0; leadNum < result.leads.length; leadNum++) {\r\n            let lead = result.leads[leadNum];\r\n            let allocatedCa = updatedCourseAdvisors[lead.allocatedCa];\r\n            let selectedPropensity = lead.courseAdvisors[allocatedCa.id].propensity;\r\n            allocatedCa.cumulativePropensity = allocatedCa.cumulativePropensity + selectedPropensity;\r\n            allocatedCa.cumulativeInherent = allocatedCa.cumulativeInherent + lead.inherent;\r\n        }\r\n\r\n        for (let caNum = 0; caNum < updatedCourseAdvisors.length; caNum++) {\r\n            let advisor = updatedCourseAdvisors[caNum];\r\n            advisor.averagePropensity = advisor.cumulativePropensity / advisor.currentAllotment;\r\n            advisor.varianceToInherent = advisor.cumulativePropensity - advisor.cumulativeInherent;\r\n            advisor.predictedConversions = advisor.currentAllotment * advisor.averagePropensity;\r\n        }\r\n\r\n        let updatedResult = {...result};\r\n        updatedResult.courseAdvisors = updatedCourseAdvisors;\r\n        return updatedResult;\r\n    }\r\n\r\n    let runSimulation = () => {\r\n        const result = generateResults(selectedMode.allocationFunction(leadData, courseAdvisors));\r\n\r\n        setLeadData(result.leads);\r\n        setCourseAdvisors(result.courseAdvisors);\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <p>\r\n                    Lead Allocation Simulator\r\n                </p>\r\n                <LocalFileReader\r\n                    onFileLoad={(e) => handleDataLoad(e)}\r\n                    onFileRemove={() => handleFileRemove()}\r\n                />\r\n                <ConfigPanel\r\n                    selectedMode={selectedMode}\r\n                    onModeChange={(e) => handleModeChange(e)}\r\n                />\r\n                <button\r\n                    onClick={() => runSimulation()}\r\n                    disabled={!leadData || !selectedMode}\r\n                >\r\n                    Run Simulation\r\n                </button>\r\n            <Table columns={resultsTableColumns} data={courseAdvisors ? courseAdvisors : []}/>\r\n\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default LeadAllocationHome;\r\n\r\n\r\n\r\n/*\r\nAllocation Mode: manual, round robin, linear weighted, polynomial weighted, optimised round robin (leeway of n)\r\nInput data (csv load)\r\nRandomise order\r\nAuto-allocate\r\n\r\nSummaries: overall result score (raw conversions, variance to inherent)\r\n\r\nIndividual leads (allocated CA [freeze], inherent, per CA propensity)\r\n\r\n*/\r\n\r\n\r\n\r\n/*\r\n\r\n[\r\n    {\r\n        leadID: 1,\r\n        createTime: 2021-1-1 11:03,\r\n        inherent: 0.18\r\n    }\r\n\r\n]\r\n\r\n\r\n*/","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport LeadAllocationHome from './LeadAllocationHome';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <LeadAllocationHome />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}